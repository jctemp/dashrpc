// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto

#include "core.pb.h"
#include "core.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace org {
namespace dash {
namespace platform {
namespace dapi {
namespace v0 {

static const char* Core_method_names[] = {
  "/org.dash.platform.dapi.v0.Core/getStatus",
  "/org.dash.platform.dapi.v0.Core/getBlock",
  "/org.dash.platform.dapi.v0.Core/broadcastTransaction",
  "/org.dash.platform.dapi.v0.Core/getTransaction",
  "/org.dash.platform.dapi.v0.Core/getEstimatedTransactionFee",
  "/org.dash.platform.dapi.v0.Core/subscribeToBlockHeadersWithChainLocks",
  "/org.dash.platform.dapi.v0.Core/subscribeToTransactionsWithProofs",
};

std::unique_ptr< Core::Stub> Core::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Core::Stub> stub(new Core::Stub(channel, options));
  return stub;
}

Core::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getStatus_(Core_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getBlock_(Core_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_broadcastTransaction_(Core_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTransaction_(Core_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEstimatedTransactionFee_(Core_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_subscribeToBlockHeadersWithChainLocks_(Core_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_subscribeToTransactionsWithProofs_(Core_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Core::Stub::getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::org::dash::platform::dapi::v0::GetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatus_, context, request, response);
}

void Core::Stub::async::getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void Core::Stub::async::getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>* Core::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::dash::platform::dapi::v0::GetStatusResponse, ::org::dash::platform::dapi::v0::GetStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>* Core::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Core::Stub::getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::org::dash::platform::dapi::v0::GetBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getBlock_, context, request, response);
}

void Core::Stub::async::getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getBlock_, context, request, response, std::move(f));
}

void Core::Stub::async::getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>* Core::Stub::PrepareAsyncgetBlockRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::dash::platform::dapi::v0::GetBlockResponse, ::org::dash::platform::dapi::v0::GetBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>* Core::Stub::AsyncgetBlockRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Core::Stub::broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_broadcastTransaction_, context, request, response);
}

void Core::Stub::async::broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_broadcastTransaction_, context, request, response, std::move(f));
}

void Core::Stub::async::broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_broadcastTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* Core::Stub::PrepareAsyncbroadcastTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse, ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_broadcastTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* Core::Stub::AsyncbroadcastTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbroadcastTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Core::Stub::getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTransaction_, context, request, response);
}

void Core::Stub::async::getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTransaction_, context, request, response, std::move(f));
}

void Core::Stub::async::getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>* Core::Stub::PrepareAsyncgetTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::dash::platform::dapi::v0::GetTransactionResponse, ::org::dash::platform::dapi::v0::GetTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>* Core::Stub::AsyncgetTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Core::Stub::getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getEstimatedTransactionFee_, context, request, response);
}

void Core::Stub::async::getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEstimatedTransactionFee_, context, request, response, std::move(f));
}

void Core::Stub::async::getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEstimatedTransactionFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* Core::Stub::PrepareAsyncgetEstimatedTransactionFeeRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getEstimatedTransactionFee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* Core::Stub::AsyncgetEstimatedTransactionFeeRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetEstimatedTransactionFeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* Core::Stub::subscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>::Create(channel_.get(), rpcmethod_subscribeToBlockHeadersWithChainLocks_, context, request);
}

void Core::Stub::async::subscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request, ::grpc::ClientReadReactor< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_subscribeToBlockHeadersWithChainLocks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* Core::Stub::AsyncsubscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>::Create(channel_.get(), cq, rpcmethod_subscribeToBlockHeadersWithChainLocks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* Core::Stub::PrepareAsyncsubscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>::Create(channel_.get(), cq, rpcmethod_subscribeToBlockHeadersWithChainLocks_, context, request, false, nullptr);
}

::grpc::ClientReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* Core::Stub::subscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>::Create(channel_.get(), rpcmethod_subscribeToTransactionsWithProofs_, context, request);
}

void Core::Stub::async::subscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request, ::grpc::ClientReadReactor< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_subscribeToTransactionsWithProofs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* Core::Stub::AsyncsubscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>::Create(channel_.get(), cq, rpcmethod_subscribeToTransactionsWithProofs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* Core::Stub::PrepareAsyncsubscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>::Create(channel_.get(), cq, rpcmethod_subscribeToTransactionsWithProofs_, context, request, false, nullptr);
}

Core::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::GetStatusRequest* req,
             ::org::dash::platform::dapi::v0::GetStatusResponse* resp) {
               return service->getStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::GetBlockRequest* req,
             ::org::dash::platform::dapi::v0::GetBlockResponse* resp) {
               return service->getBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* req,
             ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* resp) {
               return service->broadcastTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::GetTransactionRequest* req,
             ::org::dash::platform::dapi::v0::GetTransactionResponse* resp) {
               return service->getTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Core::Service, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* req,
             ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* resp) {
               return service->getEstimatedTransactionFee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Core::Service, ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest, ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* req,
             ::grpc::ServerWriter<::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* writer) {
               return service->subscribeToBlockHeadersWithChainLocks(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Core_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Core::Service, ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest, ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>(
          [](Core::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* req,
             ::grpc::ServerWriter<::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* writer) {
               return service->subscribeToTransactionsWithProofs(ctx, req, writer);
             }, this)));
}

Core::Service::~Service() {
}

::grpc::Status Core::Service::getStatus(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::getBlock(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::broadcastTransaction(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::getTransaction(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::getEstimatedTransactionFee(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Core::Service::subscribeToTransactionsWithProofs(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace dash
}  // namespace platform
}  // namespace dapi
}  // namespace v0

