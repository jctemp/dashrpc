// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_platform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_platform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_platform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_platform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_platform_2eproto;
namespace org {
namespace dash {
namespace platform {
namespace dapi {
namespace v0 {
class BroadcastStateTransitionRequest;
struct BroadcastStateTransitionRequestDefaultTypeInternal;
extern BroadcastStateTransitionRequestDefaultTypeInternal _BroadcastStateTransitionRequest_default_instance_;
class BroadcastStateTransitionResponse;
struct BroadcastStateTransitionResponseDefaultTypeInternal;
extern BroadcastStateTransitionResponseDefaultTypeInternal _BroadcastStateTransitionResponse_default_instance_;
class ConsensusParamsBlock;
struct ConsensusParamsBlockDefaultTypeInternal;
extern ConsensusParamsBlockDefaultTypeInternal _ConsensusParamsBlock_default_instance_;
class ConsensusParamsEvidence;
struct ConsensusParamsEvidenceDefaultTypeInternal;
extern ConsensusParamsEvidenceDefaultTypeInternal _ConsensusParamsEvidence_default_instance_;
class GetConsensusParamsRequest;
struct GetConsensusParamsRequestDefaultTypeInternal;
extern GetConsensusParamsRequestDefaultTypeInternal _GetConsensusParamsRequest_default_instance_;
class GetConsensusParamsResponse;
struct GetConsensusParamsResponseDefaultTypeInternal;
extern GetConsensusParamsResponseDefaultTypeInternal _GetConsensusParamsResponse_default_instance_;
class GetDataContractRequest;
struct GetDataContractRequestDefaultTypeInternal;
extern GetDataContractRequestDefaultTypeInternal _GetDataContractRequest_default_instance_;
class GetDataContractResponse;
struct GetDataContractResponseDefaultTypeInternal;
extern GetDataContractResponseDefaultTypeInternal _GetDataContractResponse_default_instance_;
class GetDocumentsRequest;
struct GetDocumentsRequestDefaultTypeInternal;
extern GetDocumentsRequestDefaultTypeInternal _GetDocumentsRequest_default_instance_;
class GetDocumentsResponse;
struct GetDocumentsResponseDefaultTypeInternal;
extern GetDocumentsResponseDefaultTypeInternal _GetDocumentsResponse_default_instance_;
class GetIdentitiesByPublicKeyHashesRequest;
struct GetIdentitiesByPublicKeyHashesRequestDefaultTypeInternal;
extern GetIdentitiesByPublicKeyHashesRequestDefaultTypeInternal _GetIdentitiesByPublicKeyHashesRequest_default_instance_;
class GetIdentitiesByPublicKeyHashesResponse;
struct GetIdentitiesByPublicKeyHashesResponseDefaultTypeInternal;
extern GetIdentitiesByPublicKeyHashesResponseDefaultTypeInternal _GetIdentitiesByPublicKeyHashesResponse_default_instance_;
class GetIdentityIdsByPublicKeyHashesRequest;
struct GetIdentityIdsByPublicKeyHashesRequestDefaultTypeInternal;
extern GetIdentityIdsByPublicKeyHashesRequestDefaultTypeInternal _GetIdentityIdsByPublicKeyHashesRequest_default_instance_;
class GetIdentityIdsByPublicKeyHashesResponse;
struct GetIdentityIdsByPublicKeyHashesResponseDefaultTypeInternal;
extern GetIdentityIdsByPublicKeyHashesResponseDefaultTypeInternal _GetIdentityIdsByPublicKeyHashesResponse_default_instance_;
class GetIdentityRequest;
struct GetIdentityRequestDefaultTypeInternal;
extern GetIdentityRequestDefaultTypeInternal _GetIdentityRequest_default_instance_;
class GetIdentityResponse;
struct GetIdentityResponseDefaultTypeInternal;
extern GetIdentityResponseDefaultTypeInternal _GetIdentityResponse_default_instance_;
class Proof;
struct ProofDefaultTypeInternal;
extern ProofDefaultTypeInternal _Proof_default_instance_;
class ResponseMetadata;
struct ResponseMetadataDefaultTypeInternal;
extern ResponseMetadataDefaultTypeInternal _ResponseMetadata_default_instance_;
class StateTransitionBroadcastError;
struct StateTransitionBroadcastErrorDefaultTypeInternal;
extern StateTransitionBroadcastErrorDefaultTypeInternal _StateTransitionBroadcastError_default_instance_;
class StoreTreeProofs;
struct StoreTreeProofsDefaultTypeInternal;
extern StoreTreeProofsDefaultTypeInternal _StoreTreeProofs_default_instance_;
class WaitForStateTransitionResultRequest;
struct WaitForStateTransitionResultRequestDefaultTypeInternal;
extern WaitForStateTransitionResultRequestDefaultTypeInternal _WaitForStateTransitionResultRequest_default_instance_;
class WaitForStateTransitionResultResponse;
struct WaitForStateTransitionResultResponseDefaultTypeInternal;
extern WaitForStateTransitionResultResponseDefaultTypeInternal _WaitForStateTransitionResultResponse_default_instance_;
}  // namespace v0
}  // namespace dapi
}  // namespace platform
}  // namespace dash
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::dash::platform::dapi::v0::BroadcastStateTransitionRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::BroadcastStateTransitionRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::BroadcastStateTransitionResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::BroadcastStateTransitionResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::ConsensusParamsBlock* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::ConsensusParamsBlock>(Arena*);
template<> ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::ConsensusParamsEvidence>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetConsensusParamsRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetConsensusParamsRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetConsensusParamsResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetConsensusParamsResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetDataContractRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetDataContractRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetDataContractResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetDataContractResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetDocumentsRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetDocumentsRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetDocumentsResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetDocumentsResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetIdentitiesByPublicKeyHashesRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetIdentitiesByPublicKeyHashesRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetIdentitiesByPublicKeyHashesResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetIdentitiesByPublicKeyHashesResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetIdentityIdsByPublicKeyHashesRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetIdentityIdsByPublicKeyHashesRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetIdentityIdsByPublicKeyHashesResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetIdentityIdsByPublicKeyHashesResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetIdentityRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetIdentityRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::GetIdentityResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::GetIdentityResponse>(Arena*);
template<> ::org::dash::platform::dapi::v0::Proof* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::Proof>(Arena*);
template<> ::org::dash::platform::dapi::v0::ResponseMetadata* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(Arena*);
template<> ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::StateTransitionBroadcastError>(Arena*);
template<> ::org::dash::platform::dapi::v0::StoreTreeProofs* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::StoreTreeProofs>(Arena*);
template<> ::org::dash::platform::dapi::v0::WaitForStateTransitionResultRequest* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::WaitForStateTransitionResultRequest>(Arena*);
template<> ::org::dash::platform::dapi::v0::WaitForStateTransitionResultResponse* Arena::CreateMaybeMessage<::org::dash::platform::dapi::v0::WaitForStateTransitionResultResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace dash {
namespace platform {
namespace dapi {
namespace v0 {

// ===================================================================

class StoreTreeProofs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.StoreTreeProofs) */ {
 public:
  inline StoreTreeProofs() : StoreTreeProofs(nullptr) {}
  ~StoreTreeProofs() override;
  explicit constexpr StoreTreeProofs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreTreeProofs(const StoreTreeProofs& from);
  StoreTreeProofs(StoreTreeProofs&& from) noexcept
    : StoreTreeProofs() {
    *this = ::std::move(from);
  }

  inline StoreTreeProofs& operator=(const StoreTreeProofs& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreTreeProofs& operator=(StoreTreeProofs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreTreeProofs& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreTreeProofs* internal_default_instance() {
    return reinterpret_cast<const StoreTreeProofs*>(
               &_StoreTreeProofs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoreTreeProofs& a, StoreTreeProofs& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreTreeProofs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreTreeProofs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreTreeProofs* New() const final {
    return new StoreTreeProofs();
  }

  StoreTreeProofs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreTreeProofs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreTreeProofs& from);
  void MergeFrom(const StoreTreeProofs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreTreeProofs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.StoreTreeProofs";
  }
  protected:
  explicit StoreTreeProofs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentitiesProofFieldNumber = 1,
    kPublicKeyHashesToIdentityIdsProofFieldNumber = 2,
    kDataContractsProofFieldNumber = 3,
    kDocumentsProofFieldNumber = 4,
  };
  // bytes identities_proof = 1;
  void clear_identities_proof();
  const std::string& identities_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identities_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identities_proof();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_identities_proof();
  void set_allocated_identities_proof(std::string* identities_proof);
  private:
  const std::string& _internal_identities_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identities_proof(const std::string& value);
  std::string* _internal_mutable_identities_proof();
  public:

  // bytes public_key_hashes_to_identity_ids_proof = 2;
  void clear_public_key_hashes_to_identity_ids_proof();
  const std::string& public_key_hashes_to_identity_ids_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key_hashes_to_identity_ids_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key_hashes_to_identity_ids_proof();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_public_key_hashes_to_identity_ids_proof();
  void set_allocated_public_key_hashes_to_identity_ids_proof(std::string* public_key_hashes_to_identity_ids_proof);
  private:
  const std::string& _internal_public_key_hashes_to_identity_ids_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key_hashes_to_identity_ids_proof(const std::string& value);
  std::string* _internal_mutable_public_key_hashes_to_identity_ids_proof();
  public:

  // bytes data_contracts_proof = 3;
  void clear_data_contracts_proof();
  const std::string& data_contracts_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_contracts_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_contracts_proof();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data_contracts_proof();
  void set_allocated_data_contracts_proof(std::string* data_contracts_proof);
  private:
  const std::string& _internal_data_contracts_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_contracts_proof(const std::string& value);
  std::string* _internal_mutable_data_contracts_proof();
  public:

  // bytes documents_proof = 4;
  void clear_documents_proof();
  const std::string& documents_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_documents_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_documents_proof();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_documents_proof();
  void set_allocated_documents_proof(std::string* documents_proof);
  private:
  const std::string& _internal_documents_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_documents_proof(const std::string& value);
  std::string* _internal_mutable_documents_proof();
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.StoreTreeProofs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identities_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_hashes_to_identity_ids_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_contracts_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documents_proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class Proof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.Proof) */ {
 public:
  inline Proof() : Proof(nullptr) {}
  ~Proof() override;
  explicit constexpr Proof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proof(const Proof& from);
  Proof(Proof&& from) noexcept
    : Proof() {
    *this = ::std::move(from);
  }

  inline Proof& operator=(const Proof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proof& operator=(Proof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proof& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proof* internal_default_instance() {
    return reinterpret_cast<const Proof*>(
               &_Proof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Proof& a, Proof& b) {
    a.Swap(&b);
  }
  inline void Swap(Proof* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proof* New() const final {
    return new Proof();
  }

  Proof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proof& from);
  void MergeFrom(const Proof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.Proof";
  }
  protected:
  explicit Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootTreeProofFieldNumber = 1,
    kSignatureLlmqHashFieldNumber = 3,
    kSignatureFieldNumber = 4,
    kStoreTreeProofsFieldNumber = 2,
  };
  // bytes root_tree_proof = 1;
  void clear_root_tree_proof();
  const std::string& root_tree_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_tree_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_tree_proof();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_root_tree_proof();
  void set_allocated_root_tree_proof(std::string* root_tree_proof);
  private:
  const std::string& _internal_root_tree_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_tree_proof(const std::string& value);
  std::string* _internal_mutable_root_tree_proof();
  public:

  // bytes signature_llmq_hash = 3;
  void clear_signature_llmq_hash();
  const std::string& signature_llmq_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_llmq_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_llmq_hash();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_signature_llmq_hash();
  void set_allocated_signature_llmq_hash(std::string* signature_llmq_hash);
  private:
  const std::string& _internal_signature_llmq_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_llmq_hash(const std::string& value);
  std::string* _internal_mutable_signature_llmq_hash();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .org.dash.platform.dapi.v0.StoreTreeProofs store_tree_proofs = 2;
  bool has_store_tree_proofs() const;
  private:
  bool _internal_has_store_tree_proofs() const;
  public:
  void clear_store_tree_proofs();
  const ::org::dash::platform::dapi::v0::StoreTreeProofs& store_tree_proofs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::StoreTreeProofs* release_store_tree_proofs();
  ::org::dash::platform::dapi::v0::StoreTreeProofs* mutable_store_tree_proofs();
  void set_allocated_store_tree_proofs(::org::dash::platform::dapi::v0::StoreTreeProofs* store_tree_proofs);
  private:
  const ::org::dash::platform::dapi::v0::StoreTreeProofs& _internal_store_tree_proofs() const;
  ::org::dash::platform::dapi::v0::StoreTreeProofs* _internal_mutable_store_tree_proofs();
  public:
  void unsafe_arena_set_allocated_store_tree_proofs(
      ::org::dash::platform::dapi::v0::StoreTreeProofs* store_tree_proofs);
  ::org::dash::platform::dapi::v0::StoreTreeProofs* unsafe_arena_release_store_tree_proofs();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.Proof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_tree_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_llmq_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::org::dash::platform::dapi::v0::StoreTreeProofs* store_tree_proofs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class ResponseMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.ResponseMetadata) */ {
 public:
  inline ResponseMetadata() : ResponseMetadata(nullptr) {}
  ~ResponseMetadata() override;
  explicit constexpr ResponseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMetadata(const ResponseMetadata& from);
  ResponseMetadata(ResponseMetadata&& from) noexcept
    : ResponseMetadata() {
    *this = ::std::move(from);
  }

  inline ResponseMetadata& operator=(const ResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMetadata& operator=(ResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const ResponseMetadata*>(
               &_ResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseMetadata& a, ResponseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseMetadata* New() const final {
    return new ResponseMetadata();
  }

  ResponseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseMetadata& from);
  void MergeFrom(const ResponseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.ResponseMetadata";
  }
  protected:
  explicit ResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kCoreChainLockedHeightFieldNumber = 2,
  };
  // int64 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 core_chain_locked_height = 2;
  void clear_core_chain_locked_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 core_chain_locked_height() const;
  void set_core_chain_locked_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_core_chain_locked_height() const;
  void _internal_set_core_chain_locked_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.ResponseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 core_chain_locked_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class StateTransitionBroadcastError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.StateTransitionBroadcastError) */ {
 public:
  inline StateTransitionBroadcastError() : StateTransitionBroadcastError(nullptr) {}
  ~StateTransitionBroadcastError() override;
  explicit constexpr StateTransitionBroadcastError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateTransitionBroadcastError(const StateTransitionBroadcastError& from);
  StateTransitionBroadcastError(StateTransitionBroadcastError&& from) noexcept
    : StateTransitionBroadcastError() {
    *this = ::std::move(from);
  }

  inline StateTransitionBroadcastError& operator=(const StateTransitionBroadcastError& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateTransitionBroadcastError& operator=(StateTransitionBroadcastError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateTransitionBroadcastError& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateTransitionBroadcastError* internal_default_instance() {
    return reinterpret_cast<const StateTransitionBroadcastError*>(
               &_StateTransitionBroadcastError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StateTransitionBroadcastError& a, StateTransitionBroadcastError& b) {
    a.Swap(&b);
  }
  inline void Swap(StateTransitionBroadcastError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateTransitionBroadcastError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateTransitionBroadcastError* New() const final {
    return new StateTransitionBroadcastError();
  }

  StateTransitionBroadcastError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateTransitionBroadcastError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateTransitionBroadcastError& from);
  void MergeFrom(const StateTransitionBroadcastError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateTransitionBroadcastError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.StateTransitionBroadcastError";
  }
  protected:
  explicit StateTransitionBroadcastError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.StateTransitionBroadcastError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class BroadcastStateTransitionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest) */ {
 public:
  inline BroadcastStateTransitionRequest() : BroadcastStateTransitionRequest(nullptr) {}
  ~BroadcastStateTransitionRequest() override;
  explicit constexpr BroadcastStateTransitionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastStateTransitionRequest(const BroadcastStateTransitionRequest& from);
  BroadcastStateTransitionRequest(BroadcastStateTransitionRequest&& from) noexcept
    : BroadcastStateTransitionRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastStateTransitionRequest& operator=(const BroadcastStateTransitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastStateTransitionRequest& operator=(BroadcastStateTransitionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastStateTransitionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastStateTransitionRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastStateTransitionRequest*>(
               &_BroadcastStateTransitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BroadcastStateTransitionRequest& a, BroadcastStateTransitionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastStateTransitionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastStateTransitionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastStateTransitionRequest* New() const final {
    return new BroadcastStateTransitionRequest();
  }

  BroadcastStateTransitionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastStateTransitionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastStateTransitionRequest& from);
  void MergeFrom(const BroadcastStateTransitionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastStateTransitionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.BroadcastStateTransitionRequest";
  }
  protected:
  explicit BroadcastStateTransitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateTransitionFieldNumber = 1,
  };
  // bytes state_transition = 1;
  void clear_state_transition();
  const std::string& state_transition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_transition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_transition();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_state_transition();
  void set_allocated_state_transition(std::string* state_transition);
  private:
  const std::string& _internal_state_transition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_transition(const std::string& value);
  std::string* _internal_mutable_state_transition();
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_transition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class BroadcastStateTransitionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.BroadcastStateTransitionResponse) */ {
 public:
  inline BroadcastStateTransitionResponse() : BroadcastStateTransitionResponse(nullptr) {}
  ~BroadcastStateTransitionResponse() override;
  explicit constexpr BroadcastStateTransitionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastStateTransitionResponse(const BroadcastStateTransitionResponse& from);
  BroadcastStateTransitionResponse(BroadcastStateTransitionResponse&& from) noexcept
    : BroadcastStateTransitionResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastStateTransitionResponse& operator=(const BroadcastStateTransitionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastStateTransitionResponse& operator=(BroadcastStateTransitionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastStateTransitionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastStateTransitionResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastStateTransitionResponse*>(
               &_BroadcastStateTransitionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BroadcastStateTransitionResponse& a, BroadcastStateTransitionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastStateTransitionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastStateTransitionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastStateTransitionResponse* New() const final {
    return new BroadcastStateTransitionResponse();
  }

  BroadcastStateTransitionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastStateTransitionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastStateTransitionResponse& from);
  void MergeFrom(const BroadcastStateTransitionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastStateTransitionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.BroadcastStateTransitionResponse";
  }
  protected:
  explicit BroadcastStateTransitionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.BroadcastStateTransitionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetIdentityRequest) */ {
 public:
  inline GetIdentityRequest() : GetIdentityRequest(nullptr) {}
  ~GetIdentityRequest() override;
  explicit constexpr GetIdentityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIdentityRequest(const GetIdentityRequest& from);
  GetIdentityRequest(GetIdentityRequest&& from) noexcept
    : GetIdentityRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentityRequest& operator=(const GetIdentityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityRequest& operator=(GetIdentityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIdentityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIdentityRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentityRequest*>(
               &_GetIdentityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetIdentityRequest& a, GetIdentityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityRequest* New() const final {
    return new GetIdentityRequest();
  }

  GetIdentityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityRequest& from);
  void MergeFrom(const GetIdentityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetIdentityRequest";
  }
  protected:
  explicit GetIdentityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProveFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool prove = 2;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetIdentityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool prove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetIdentityResponse) */ {
 public:
  inline GetIdentityResponse() : GetIdentityResponse(nullptr) {}
  ~GetIdentityResponse() override;
  explicit constexpr GetIdentityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIdentityResponse(const GetIdentityResponse& from);
  GetIdentityResponse(GetIdentityResponse&& from) noexcept
    : GetIdentityResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentityResponse& operator=(const GetIdentityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityResponse& operator=(GetIdentityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIdentityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIdentityResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentityResponse*>(
               &_GetIdentityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetIdentityResponse& a, GetIdentityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityResponse* New() const final {
    return new GetIdentityResponse();
  }

  GetIdentityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityResponse& from);
  void MergeFrom(const GetIdentityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetIdentityResponse";
  }
  protected:
  explicit GetIdentityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityFieldNumber = 1,
    kProofFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // bytes identity = 1;
  void clear_identity();
  const std::string& identity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identity();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // .org.dash.platform.dapi.v0.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::org::dash::platform::dapi::v0::Proof& proof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::Proof* release_proof();
  ::org::dash::platform::dapi::v0::Proof* mutable_proof();
  void set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof);
  private:
  const ::org::dash::platform::dapi::v0::Proof& _internal_proof() const;
  ::org::dash::platform::dapi::v0::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::org::dash::platform::dapi::v0::Proof* proof);
  ::org::dash::platform::dapi::v0::Proof* unsafe_arena_release_proof();

  // .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::org::dash::platform::dapi::v0::ResponseMetadata& metadata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ResponseMetadata* release_metadata();
  ::org::dash::platform::dapi::v0::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  private:
  const ::org::dash::platform::dapi::v0::ResponseMetadata& _internal_metadata() const;
  ::org::dash::platform::dapi::v0::ResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  ::org::dash::platform::dapi::v0::ResponseMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetIdentityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
  ::org::dash::platform::dapi::v0::Proof* proof_;
  ::org::dash::platform::dapi::v0::ResponseMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetDataContractRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetDataContractRequest) */ {
 public:
  inline GetDataContractRequest() : GetDataContractRequest(nullptr) {}
  ~GetDataContractRequest() override;
  explicit constexpr GetDataContractRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataContractRequest(const GetDataContractRequest& from);
  GetDataContractRequest(GetDataContractRequest&& from) noexcept
    : GetDataContractRequest() {
    *this = ::std::move(from);
  }

  inline GetDataContractRequest& operator=(const GetDataContractRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataContractRequest& operator=(GetDataContractRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataContractRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataContractRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataContractRequest*>(
               &_GetDataContractRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetDataContractRequest& a, GetDataContractRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataContractRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataContractRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataContractRequest* New() const final {
    return new GetDataContractRequest();
  }

  GetDataContractRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataContractRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataContractRequest& from);
  void MergeFrom(const GetDataContractRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataContractRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetDataContractRequest";
  }
  protected:
  explicit GetDataContractRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProveFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool prove = 2;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetDataContractRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool prove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetDataContractResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetDataContractResponse) */ {
 public:
  inline GetDataContractResponse() : GetDataContractResponse(nullptr) {}
  ~GetDataContractResponse() override;
  explicit constexpr GetDataContractResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDataContractResponse(const GetDataContractResponse& from);
  GetDataContractResponse(GetDataContractResponse&& from) noexcept
    : GetDataContractResponse() {
    *this = ::std::move(from);
  }

  inline GetDataContractResponse& operator=(const GetDataContractResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataContractResponse& operator=(GetDataContractResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataContractResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataContractResponse* internal_default_instance() {
    return reinterpret_cast<const GetDataContractResponse*>(
               &_GetDataContractResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetDataContractResponse& a, GetDataContractResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataContractResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataContractResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataContractResponse* New() const final {
    return new GetDataContractResponse();
  }

  GetDataContractResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataContractResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataContractResponse& from);
  void MergeFrom(const GetDataContractResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataContractResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetDataContractResponse";
  }
  protected:
  explicit GetDataContractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataContractFieldNumber = 1,
    kProofFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // bytes data_contract = 1;
  void clear_data_contract();
  const std::string& data_contract() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_contract(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_contract();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data_contract();
  void set_allocated_data_contract(std::string* data_contract);
  private:
  const std::string& _internal_data_contract() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_contract(const std::string& value);
  std::string* _internal_mutable_data_contract();
  public:

  // .org.dash.platform.dapi.v0.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::org::dash::platform::dapi::v0::Proof& proof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::Proof* release_proof();
  ::org::dash::platform::dapi::v0::Proof* mutable_proof();
  void set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof);
  private:
  const ::org::dash::platform::dapi::v0::Proof& _internal_proof() const;
  ::org::dash::platform::dapi::v0::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::org::dash::platform::dapi::v0::Proof* proof);
  ::org::dash::platform::dapi::v0::Proof* unsafe_arena_release_proof();

  // .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::org::dash::platform::dapi::v0::ResponseMetadata& metadata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ResponseMetadata* release_metadata();
  ::org::dash::platform::dapi::v0::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  private:
  const ::org::dash::platform::dapi::v0::ResponseMetadata& _internal_metadata() const;
  ::org::dash::platform::dapi::v0::ResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  ::org::dash::platform::dapi::v0::ResponseMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetDataContractResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_contract_;
  ::org::dash::platform::dapi::v0::Proof* proof_;
  ::org::dash::platform::dapi::v0::ResponseMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetDocumentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetDocumentsRequest) */ {
 public:
  inline GetDocumentsRequest() : GetDocumentsRequest(nullptr) {}
  ~GetDocumentsRequest() override;
  explicit constexpr GetDocumentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDocumentsRequest(const GetDocumentsRequest& from);
  GetDocumentsRequest(GetDocumentsRequest&& from) noexcept
    : GetDocumentsRequest() {
    *this = ::std::move(from);
  }

  inline GetDocumentsRequest& operator=(const GetDocumentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDocumentsRequest& operator=(GetDocumentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDocumentsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum StartCase {
    kStartAfter = 6,
    kStartAt = 7,
    START_NOT_SET = 0,
  };

  static inline const GetDocumentsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDocumentsRequest*>(
               &_GetDocumentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetDocumentsRequest& a, GetDocumentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDocumentsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDocumentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDocumentsRequest* New() const final {
    return new GetDocumentsRequest();
  }

  GetDocumentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDocumentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDocumentsRequest& from);
  void MergeFrom(const GetDocumentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDocumentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetDocumentsRequest";
  }
  protected:
  explicit GetDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataContractIdFieldNumber = 1,
    kDocumentTypeFieldNumber = 2,
    kWhereFieldNumber = 3,
    kOrderByFieldNumber = 4,
    kLimitFieldNumber = 5,
    kProveFieldNumber = 8,
    kStartAfterFieldNumber = 6,
    kStartAtFieldNumber = 7,
  };
  // bytes data_contract_id = 1;
  void clear_data_contract_id();
  const std::string& data_contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_contract_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data_contract_id();
  void set_allocated_data_contract_id(std::string* data_contract_id);
  private:
  const std::string& _internal_data_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_contract_id(const std::string& value);
  std::string* _internal_mutable_data_contract_id();
  public:

  // string document_type = 2;
  void clear_document_type();
  const std::string& document_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_document_type();
  void set_allocated_document_type(std::string* document_type);
  private:
  const std::string& _internal_document_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_type(const std::string& value);
  std::string* _internal_mutable_document_type();
  public:

  // bytes where = 3;
  void clear_where();
  const std::string& where() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_where(ArgT0&& arg0, ArgT... args);
  std::string* mutable_where();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_where();
  void set_allocated_where(std::string* where);
  private:
  const std::string& _internal_where() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_where(const std::string& value);
  std::string* _internal_mutable_where();
  public:

  // bytes order_by = 4;
  void clear_order_by();
  const std::string& order_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_by();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_by();
  void set_allocated_order_by(std::string* order_by);
  private:
  const std::string& _internal_order_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_by(const std::string& value);
  std::string* _internal_mutable_order_by();
  public:

  // uint32 limit = 5;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool prove = 8;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // uint32 start_after = 6;
  bool has_start_after() const;
  private:
  bool _internal_has_start_after() const;
  public:
  void clear_start_after();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_after() const;
  void set_start_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_after() const;
  void _internal_set_start_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 start_at = 7;
  bool has_start_at() const;
  private:
  bool _internal_has_start_at() const;
  public:
  void clear_start_at();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_at() const;
  void set_start_at(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_at() const;
  void _internal_set_start_at(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_start();
  StartCase start_case() const;
  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetDocumentsRequest)
 private:
  class _Internal;
  void set_has_start_after();
  void set_has_start_at();

  inline bool has_start() const;
  inline void clear_has_start();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_by_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  bool prove_;
  union StartUnion {
    constexpr StartUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 start_after_;
    ::PROTOBUF_NAMESPACE_ID::uint32 start_at_;
  } start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetDocumentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetDocumentsResponse) */ {
 public:
  inline GetDocumentsResponse() : GetDocumentsResponse(nullptr) {}
  ~GetDocumentsResponse() override;
  explicit constexpr GetDocumentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDocumentsResponse(const GetDocumentsResponse& from);
  GetDocumentsResponse(GetDocumentsResponse&& from) noexcept
    : GetDocumentsResponse() {
    *this = ::std::move(from);
  }

  inline GetDocumentsResponse& operator=(const GetDocumentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDocumentsResponse& operator=(GetDocumentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDocumentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDocumentsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDocumentsResponse*>(
               &_GetDocumentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetDocumentsResponse& a, GetDocumentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDocumentsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDocumentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDocumentsResponse* New() const final {
    return new GetDocumentsResponse();
  }

  GetDocumentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDocumentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDocumentsResponse& from);
  void MergeFrom(const GetDocumentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDocumentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetDocumentsResponse";
  }
  protected:
  explicit GetDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentsFieldNumber = 1,
    kProofFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // repeated bytes documents = 1;
  int documents_size() const;
  private:
  int _internal_documents_size() const;
  public:
  void clear_documents();
  const std::string& documents(int index) const;
  std::string* mutable_documents(int index);
  void set_documents(int index, const std::string& value);
  void set_documents(int index, std::string&& value);
  void set_documents(int index, const char* value);
  void set_documents(int index, const void* value, size_t size);
  std::string* add_documents();
  void add_documents(const std::string& value);
  void add_documents(std::string&& value);
  void add_documents(const char* value);
  void add_documents(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& documents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_documents();
  private:
  const std::string& _internal_documents(int index) const;
  std::string* _internal_add_documents();
  public:

  // .org.dash.platform.dapi.v0.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::org::dash::platform::dapi::v0::Proof& proof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::Proof* release_proof();
  ::org::dash::platform::dapi::v0::Proof* mutable_proof();
  void set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof);
  private:
  const ::org::dash::platform::dapi::v0::Proof& _internal_proof() const;
  ::org::dash::platform::dapi::v0::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::org::dash::platform::dapi::v0::Proof* proof);
  ::org::dash::platform::dapi::v0::Proof* unsafe_arena_release_proof();

  // .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::org::dash::platform::dapi::v0::ResponseMetadata& metadata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ResponseMetadata* release_metadata();
  ::org::dash::platform::dapi::v0::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  private:
  const ::org::dash::platform::dapi::v0::ResponseMetadata& _internal_metadata() const;
  ::org::dash::platform::dapi::v0::ResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  ::org::dash::platform::dapi::v0::ResponseMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetDocumentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> documents_;
  ::org::dash::platform::dapi::v0::Proof* proof_;
  ::org::dash::platform::dapi::v0::ResponseMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesByPublicKeyHashesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest) */ {
 public:
  inline GetIdentitiesByPublicKeyHashesRequest() : GetIdentitiesByPublicKeyHashesRequest(nullptr) {}
  ~GetIdentitiesByPublicKeyHashesRequest() override;
  explicit constexpr GetIdentitiesByPublicKeyHashesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIdentitiesByPublicKeyHashesRequest(const GetIdentitiesByPublicKeyHashesRequest& from);
  GetIdentitiesByPublicKeyHashesRequest(GetIdentitiesByPublicKeyHashesRequest&& from) noexcept
    : GetIdentitiesByPublicKeyHashesRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesByPublicKeyHashesRequest& operator=(const GetIdentitiesByPublicKeyHashesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesByPublicKeyHashesRequest& operator=(GetIdentitiesByPublicKeyHashesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIdentitiesByPublicKeyHashesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIdentitiesByPublicKeyHashesRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesByPublicKeyHashesRequest*>(
               &_GetIdentitiesByPublicKeyHashesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetIdentitiesByPublicKeyHashesRequest& a, GetIdentitiesByPublicKeyHashesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesByPublicKeyHashesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesByPublicKeyHashesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesByPublicKeyHashesRequest* New() const final {
    return new GetIdentitiesByPublicKeyHashesRequest();
  }

  GetIdentitiesByPublicKeyHashesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesByPublicKeyHashesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesByPublicKeyHashesRequest& from);
  void MergeFrom(const GetIdentitiesByPublicKeyHashesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesByPublicKeyHashesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest";
  }
  protected:
  explicit GetIdentitiesByPublicKeyHashesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyHashesFieldNumber = 1,
    kProveFieldNumber = 2,
  };
  // repeated bytes public_key_hashes = 1;
  int public_key_hashes_size() const;
  private:
  int _internal_public_key_hashes_size() const;
  public:
  void clear_public_key_hashes();
  const std::string& public_key_hashes(int index) const;
  std::string* mutable_public_key_hashes(int index);
  void set_public_key_hashes(int index, const std::string& value);
  void set_public_key_hashes(int index, std::string&& value);
  void set_public_key_hashes(int index, const char* value);
  void set_public_key_hashes(int index, const void* value, size_t size);
  std::string* add_public_key_hashes();
  void add_public_key_hashes(const std::string& value);
  void add_public_key_hashes(std::string&& value);
  void add_public_key_hashes(const char* value);
  void add_public_key_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_key_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_key_hashes();
  private:
  const std::string& _internal_public_key_hashes(int index) const;
  std::string* _internal_add_public_key_hashes();
  public:

  // bool prove = 2;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_key_hashes_;
  bool prove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetIdentitiesByPublicKeyHashesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse) */ {
 public:
  inline GetIdentitiesByPublicKeyHashesResponse() : GetIdentitiesByPublicKeyHashesResponse(nullptr) {}
  ~GetIdentitiesByPublicKeyHashesResponse() override;
  explicit constexpr GetIdentitiesByPublicKeyHashesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIdentitiesByPublicKeyHashesResponse(const GetIdentitiesByPublicKeyHashesResponse& from);
  GetIdentitiesByPublicKeyHashesResponse(GetIdentitiesByPublicKeyHashesResponse&& from) noexcept
    : GetIdentitiesByPublicKeyHashesResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentitiesByPublicKeyHashesResponse& operator=(const GetIdentitiesByPublicKeyHashesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentitiesByPublicKeyHashesResponse& operator=(GetIdentitiesByPublicKeyHashesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIdentitiesByPublicKeyHashesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIdentitiesByPublicKeyHashesResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentitiesByPublicKeyHashesResponse*>(
               &_GetIdentitiesByPublicKeyHashesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetIdentitiesByPublicKeyHashesResponse& a, GetIdentitiesByPublicKeyHashesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentitiesByPublicKeyHashesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentitiesByPublicKeyHashesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentitiesByPublicKeyHashesResponse* New() const final {
    return new GetIdentitiesByPublicKeyHashesResponse();
  }

  GetIdentitiesByPublicKeyHashesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentitiesByPublicKeyHashesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentitiesByPublicKeyHashesResponse& from);
  void MergeFrom(const GetIdentitiesByPublicKeyHashesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentitiesByPublicKeyHashesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse";
  }
  protected:
  explicit GetIdentitiesByPublicKeyHashesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentitiesFieldNumber = 1,
    kProofFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // repeated bytes identities = 1;
  int identities_size() const;
  private:
  int _internal_identities_size() const;
  public:
  void clear_identities();
  const std::string& identities(int index) const;
  std::string* mutable_identities(int index);
  void set_identities(int index, const std::string& value);
  void set_identities(int index, std::string&& value);
  void set_identities(int index, const char* value);
  void set_identities(int index, const void* value, size_t size);
  std::string* add_identities();
  void add_identities(const std::string& value);
  void add_identities(std::string&& value);
  void add_identities(const char* value);
  void add_identities(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& identities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_identities();
  private:
  const std::string& _internal_identities(int index) const;
  std::string* _internal_add_identities();
  public:

  // .org.dash.platform.dapi.v0.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::org::dash::platform::dapi::v0::Proof& proof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::Proof* release_proof();
  ::org::dash::platform::dapi::v0::Proof* mutable_proof();
  void set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof);
  private:
  const ::org::dash::platform::dapi::v0::Proof& _internal_proof() const;
  ::org::dash::platform::dapi::v0::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::org::dash::platform::dapi::v0::Proof* proof);
  ::org::dash::platform::dapi::v0::Proof* unsafe_arena_release_proof();

  // .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::org::dash::platform::dapi::v0::ResponseMetadata& metadata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ResponseMetadata* release_metadata();
  ::org::dash::platform::dapi::v0::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  private:
  const ::org::dash::platform::dapi::v0::ResponseMetadata& _internal_metadata() const;
  ::org::dash::platform::dapi::v0::ResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  ::org::dash::platform::dapi::v0::ResponseMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> identities_;
  ::org::dash::platform::dapi::v0::Proof* proof_;
  ::org::dash::platform::dapi::v0::ResponseMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityIdsByPublicKeyHashesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest) */ {
 public:
  inline GetIdentityIdsByPublicKeyHashesRequest() : GetIdentityIdsByPublicKeyHashesRequest(nullptr) {}
  ~GetIdentityIdsByPublicKeyHashesRequest() override;
  explicit constexpr GetIdentityIdsByPublicKeyHashesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIdentityIdsByPublicKeyHashesRequest(const GetIdentityIdsByPublicKeyHashesRequest& from);
  GetIdentityIdsByPublicKeyHashesRequest(GetIdentityIdsByPublicKeyHashesRequest&& from) noexcept
    : GetIdentityIdsByPublicKeyHashesRequest() {
    *this = ::std::move(from);
  }

  inline GetIdentityIdsByPublicKeyHashesRequest& operator=(const GetIdentityIdsByPublicKeyHashesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityIdsByPublicKeyHashesRequest& operator=(GetIdentityIdsByPublicKeyHashesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIdentityIdsByPublicKeyHashesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIdentityIdsByPublicKeyHashesRequest* internal_default_instance() {
    return reinterpret_cast<const GetIdentityIdsByPublicKeyHashesRequest*>(
               &_GetIdentityIdsByPublicKeyHashesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetIdentityIdsByPublicKeyHashesRequest& a, GetIdentityIdsByPublicKeyHashesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityIdsByPublicKeyHashesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityIdsByPublicKeyHashesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityIdsByPublicKeyHashesRequest* New() const final {
    return new GetIdentityIdsByPublicKeyHashesRequest();
  }

  GetIdentityIdsByPublicKeyHashesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityIdsByPublicKeyHashesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityIdsByPublicKeyHashesRequest& from);
  void MergeFrom(const GetIdentityIdsByPublicKeyHashesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityIdsByPublicKeyHashesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest";
  }
  protected:
  explicit GetIdentityIdsByPublicKeyHashesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyHashesFieldNumber = 1,
    kProveFieldNumber = 2,
  };
  // repeated bytes public_key_hashes = 1;
  int public_key_hashes_size() const;
  private:
  int _internal_public_key_hashes_size() const;
  public:
  void clear_public_key_hashes();
  const std::string& public_key_hashes(int index) const;
  std::string* mutable_public_key_hashes(int index);
  void set_public_key_hashes(int index, const std::string& value);
  void set_public_key_hashes(int index, std::string&& value);
  void set_public_key_hashes(int index, const char* value);
  void set_public_key_hashes(int index, const void* value, size_t size);
  std::string* add_public_key_hashes();
  void add_public_key_hashes(const std::string& value);
  void add_public_key_hashes(std::string&& value);
  void add_public_key_hashes(const char* value);
  void add_public_key_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_key_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_key_hashes();
  private:
  const std::string& _internal_public_key_hashes(int index) const;
  std::string* _internal_add_public_key_hashes();
  public:

  // bool prove = 2;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_key_hashes_;
  bool prove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetIdentityIdsByPublicKeyHashesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse) */ {
 public:
  inline GetIdentityIdsByPublicKeyHashesResponse() : GetIdentityIdsByPublicKeyHashesResponse(nullptr) {}
  ~GetIdentityIdsByPublicKeyHashesResponse() override;
  explicit constexpr GetIdentityIdsByPublicKeyHashesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIdentityIdsByPublicKeyHashesResponse(const GetIdentityIdsByPublicKeyHashesResponse& from);
  GetIdentityIdsByPublicKeyHashesResponse(GetIdentityIdsByPublicKeyHashesResponse&& from) noexcept
    : GetIdentityIdsByPublicKeyHashesResponse() {
    *this = ::std::move(from);
  }

  inline GetIdentityIdsByPublicKeyHashesResponse& operator=(const GetIdentityIdsByPublicKeyHashesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIdentityIdsByPublicKeyHashesResponse& operator=(GetIdentityIdsByPublicKeyHashesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIdentityIdsByPublicKeyHashesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIdentityIdsByPublicKeyHashesResponse* internal_default_instance() {
    return reinterpret_cast<const GetIdentityIdsByPublicKeyHashesResponse*>(
               &_GetIdentityIdsByPublicKeyHashesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetIdentityIdsByPublicKeyHashesResponse& a, GetIdentityIdsByPublicKeyHashesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIdentityIdsByPublicKeyHashesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIdentityIdsByPublicKeyHashesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIdentityIdsByPublicKeyHashesResponse* New() const final {
    return new GetIdentityIdsByPublicKeyHashesResponse();
  }

  GetIdentityIdsByPublicKeyHashesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIdentityIdsByPublicKeyHashesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIdentityIdsByPublicKeyHashesResponse& from);
  void MergeFrom(const GetIdentityIdsByPublicKeyHashesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIdentityIdsByPublicKeyHashesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse";
  }
  protected:
  explicit GetIdentityIdsByPublicKeyHashesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentityIdsFieldNumber = 1,
    kProofFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // repeated bytes identity_ids = 1;
  int identity_ids_size() const;
  private:
  int _internal_identity_ids_size() const;
  public:
  void clear_identity_ids();
  const std::string& identity_ids(int index) const;
  std::string* mutable_identity_ids(int index);
  void set_identity_ids(int index, const std::string& value);
  void set_identity_ids(int index, std::string&& value);
  void set_identity_ids(int index, const char* value);
  void set_identity_ids(int index, const void* value, size_t size);
  std::string* add_identity_ids();
  void add_identity_ids(const std::string& value);
  void add_identity_ids(std::string&& value);
  void add_identity_ids(const char* value);
  void add_identity_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& identity_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_identity_ids();
  private:
  const std::string& _internal_identity_ids(int index) const;
  std::string* _internal_add_identity_ids();
  public:

  // .org.dash.platform.dapi.v0.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::org::dash::platform::dapi::v0::Proof& proof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::Proof* release_proof();
  ::org::dash::platform::dapi::v0::Proof* mutable_proof();
  void set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof);
  private:
  const ::org::dash::platform::dapi::v0::Proof& _internal_proof() const;
  ::org::dash::platform::dapi::v0::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::org::dash::platform::dapi::v0::Proof* proof);
  ::org::dash::platform::dapi::v0::Proof* unsafe_arena_release_proof();

  // .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::org::dash::platform::dapi::v0::ResponseMetadata& metadata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ResponseMetadata* release_metadata();
  ::org::dash::platform::dapi::v0::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  private:
  const ::org::dash::platform::dapi::v0::ResponseMetadata& _internal_metadata() const;
  ::org::dash::platform::dapi::v0::ResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  ::org::dash::platform::dapi::v0::ResponseMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> identity_ids_;
  ::org::dash::platform::dapi::v0::Proof* proof_;
  ::org::dash::platform::dapi::v0::ResponseMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class WaitForStateTransitionResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest) */ {
 public:
  inline WaitForStateTransitionResultRequest() : WaitForStateTransitionResultRequest(nullptr) {}
  ~WaitForStateTransitionResultRequest() override;
  explicit constexpr WaitForStateTransitionResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitForStateTransitionResultRequest(const WaitForStateTransitionResultRequest& from);
  WaitForStateTransitionResultRequest(WaitForStateTransitionResultRequest&& from) noexcept
    : WaitForStateTransitionResultRequest() {
    *this = ::std::move(from);
  }

  inline WaitForStateTransitionResultRequest& operator=(const WaitForStateTransitionResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForStateTransitionResultRequest& operator=(WaitForStateTransitionResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForStateTransitionResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitForStateTransitionResultRequest* internal_default_instance() {
    return reinterpret_cast<const WaitForStateTransitionResultRequest*>(
               &_WaitForStateTransitionResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WaitForStateTransitionResultRequest& a, WaitForStateTransitionResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitForStateTransitionResultRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForStateTransitionResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitForStateTransitionResultRequest* New() const final {
    return new WaitForStateTransitionResultRequest();
  }

  WaitForStateTransitionResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitForStateTransitionResultRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitForStateTransitionResultRequest& from);
  void MergeFrom(const WaitForStateTransitionResultRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitForStateTransitionResultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest";
  }
  protected:
  explicit WaitForStateTransitionResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateTransitionHashFieldNumber = 1,
    kProveFieldNumber = 2,
  };
  // bytes state_transition_hash = 1;
  void clear_state_transition_hash();
  const std::string& state_transition_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_transition_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_transition_hash();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_state_transition_hash();
  void set_allocated_state_transition_hash(std::string* state_transition_hash);
  private:
  const std::string& _internal_state_transition_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_transition_hash(const std::string& value);
  std::string* _internal_mutable_state_transition_hash();
  public:

  // bool prove = 2;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_transition_hash_;
  bool prove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class WaitForStateTransitionResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse) */ {
 public:
  inline WaitForStateTransitionResultResponse() : WaitForStateTransitionResultResponse(nullptr) {}
  ~WaitForStateTransitionResultResponse() override;
  explicit constexpr WaitForStateTransitionResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitForStateTransitionResultResponse(const WaitForStateTransitionResultResponse& from);
  WaitForStateTransitionResultResponse(WaitForStateTransitionResultResponse&& from) noexcept
    : WaitForStateTransitionResultResponse() {
    *this = ::std::move(from);
  }

  inline WaitForStateTransitionResultResponse& operator=(const WaitForStateTransitionResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitForStateTransitionResultResponse& operator=(WaitForStateTransitionResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitForStateTransitionResultResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponsesCase {
    kError = 1,
    kProof = 2,
    RESPONSES_NOT_SET = 0,
  };

  static inline const WaitForStateTransitionResultResponse* internal_default_instance() {
    return reinterpret_cast<const WaitForStateTransitionResultResponse*>(
               &_WaitForStateTransitionResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WaitForStateTransitionResultResponse& a, WaitForStateTransitionResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitForStateTransitionResultResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitForStateTransitionResultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitForStateTransitionResultResponse* New() const final {
    return new WaitForStateTransitionResultResponse();
  }

  WaitForStateTransitionResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitForStateTransitionResultResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitForStateTransitionResultResponse& from);
  void MergeFrom(const WaitForStateTransitionResultResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitForStateTransitionResultResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse";
  }
  protected:
  explicit WaitForStateTransitionResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kErrorFieldNumber = 1,
    kProofFieldNumber = 2,
  };
  // .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::org::dash::platform::dapi::v0::ResponseMetadata& metadata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ResponseMetadata* release_metadata();
  ::org::dash::platform::dapi::v0::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  private:
  const ::org::dash::platform::dapi::v0::ResponseMetadata& _internal_metadata() const;
  ::org::dash::platform::dapi::v0::ResponseMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::org::dash::platform::dapi::v0::ResponseMetadata* metadata);
  ::org::dash::platform::dapi::v0::ResponseMetadata* unsafe_arena_release_metadata();

  // .org.dash.platform.dapi.v0.StateTransitionBroadcastError error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::org::dash::platform::dapi::v0::StateTransitionBroadcastError& error() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* release_error();
  ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* mutable_error();
  void set_allocated_error(::org::dash::platform::dapi::v0::StateTransitionBroadcastError* error);
  private:
  const ::org::dash::platform::dapi::v0::StateTransitionBroadcastError& _internal_error() const;
  ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* error);
  ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* unsafe_arena_release_error();

  // .org.dash.platform.dapi.v0.Proof proof = 2;
  bool has_proof() const;
  private:
  bool _internal_has_proof() const;
  public:
  void clear_proof();
  const ::org::dash::platform::dapi::v0::Proof& proof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::Proof* release_proof();
  ::org::dash::platform::dapi::v0::Proof* mutable_proof();
  void set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof);
  private:
  const ::org::dash::platform::dapi::v0::Proof& _internal_proof() const;
  ::org::dash::platform::dapi::v0::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::org::dash::platform::dapi::v0::Proof* proof);
  ::org::dash::platform::dapi::v0::Proof* unsafe_arena_release_proof();

  void clear_responses();
  ResponsesCase responses_case() const;
  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse)
 private:
  class _Internal;
  void set_has_error();
  void set_has_proof();

  inline bool has_responses() const;
  inline void clear_has_responses();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::org::dash::platform::dapi::v0::ResponseMetadata* metadata_;
  union ResponsesUnion {
    constexpr ResponsesUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* error_;
    ::org::dash::platform::dapi::v0::Proof* proof_;
  } responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class ConsensusParamsBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.ConsensusParamsBlock) */ {
 public:
  inline ConsensusParamsBlock() : ConsensusParamsBlock(nullptr) {}
  ~ConsensusParamsBlock() override;
  explicit constexpr ConsensusParamsBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusParamsBlock(const ConsensusParamsBlock& from);
  ConsensusParamsBlock(ConsensusParamsBlock&& from) noexcept
    : ConsensusParamsBlock() {
    *this = ::std::move(from);
  }

  inline ConsensusParamsBlock& operator=(const ConsensusParamsBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusParamsBlock& operator=(ConsensusParamsBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusParamsBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusParamsBlock* internal_default_instance() {
    return reinterpret_cast<const ConsensusParamsBlock*>(
               &_ConsensusParamsBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ConsensusParamsBlock& a, ConsensusParamsBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusParamsBlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusParamsBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsensusParamsBlock* New() const final {
    return new ConsensusParamsBlock();
  }

  ConsensusParamsBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusParamsBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusParamsBlock& from);
  void MergeFrom(const ConsensusParamsBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusParamsBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.ConsensusParamsBlock";
  }
  protected:
  explicit ConsensusParamsBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBytesFieldNumber = 1,
    kMaxGasFieldNumber = 2,
    kTimeIotaMsFieldNumber = 3,
  };
  // string max_bytes = 1;
  void clear_max_bytes();
  const std::string& max_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_bytes();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_max_bytes();
  void set_allocated_max_bytes(std::string* max_bytes);
  private:
  const std::string& _internal_max_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_bytes(const std::string& value);
  std::string* _internal_mutable_max_bytes();
  public:

  // string max_gas = 2;
  void clear_max_gas();
  const std::string& max_gas() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_gas(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_gas();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_max_gas();
  void set_allocated_max_gas(std::string* max_gas);
  private:
  const std::string& _internal_max_gas() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_gas(const std::string& value);
  std::string* _internal_mutable_max_gas();
  public:

  // string time_iota_ms = 3;
  void clear_time_iota_ms();
  const std::string& time_iota_ms() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_iota_ms(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_iota_ms();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_time_iota_ms();
  void set_allocated_time_iota_ms(std::string* time_iota_ms);
  private:
  const std::string& _internal_time_iota_ms() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_iota_ms(const std::string& value);
  std::string* _internal_mutable_time_iota_ms();
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.ConsensusParamsBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_iota_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class ConsensusParamsEvidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.ConsensusParamsEvidence) */ {
 public:
  inline ConsensusParamsEvidence() : ConsensusParamsEvidence(nullptr) {}
  ~ConsensusParamsEvidence() override;
  explicit constexpr ConsensusParamsEvidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusParamsEvidence(const ConsensusParamsEvidence& from);
  ConsensusParamsEvidence(ConsensusParamsEvidence&& from) noexcept
    : ConsensusParamsEvidence() {
    *this = ::std::move(from);
  }

  inline ConsensusParamsEvidence& operator=(const ConsensusParamsEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusParamsEvidence& operator=(ConsensusParamsEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusParamsEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusParamsEvidence* internal_default_instance() {
    return reinterpret_cast<const ConsensusParamsEvidence*>(
               &_ConsensusParamsEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ConsensusParamsEvidence& a, ConsensusParamsEvidence& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusParamsEvidence* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusParamsEvidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsensusParamsEvidence* New() const final {
    return new ConsensusParamsEvidence();
  }

  ConsensusParamsEvidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusParamsEvidence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusParamsEvidence& from);
  void MergeFrom(const ConsensusParamsEvidence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusParamsEvidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.ConsensusParamsEvidence";
  }
  protected:
  explicit ConsensusParamsEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAgeNumBlocksFieldNumber = 1,
    kMaxAgeDurationFieldNumber = 2,
    kMaxBytesFieldNumber = 3,
  };
  // string max_age_num_blocks = 1;
  void clear_max_age_num_blocks();
  const std::string& max_age_num_blocks() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_age_num_blocks(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_age_num_blocks();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_max_age_num_blocks();
  void set_allocated_max_age_num_blocks(std::string* max_age_num_blocks);
  private:
  const std::string& _internal_max_age_num_blocks() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_age_num_blocks(const std::string& value);
  std::string* _internal_mutable_max_age_num_blocks();
  public:

  // string max_age_duration = 2;
  void clear_max_age_duration();
  const std::string& max_age_duration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_age_duration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_age_duration();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_max_age_duration();
  void set_allocated_max_age_duration(std::string* max_age_duration);
  private:
  const std::string& _internal_max_age_duration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_age_duration(const std::string& value);
  std::string* _internal_mutable_max_age_duration();
  public:

  // string max_bytes = 3;
  void clear_max_bytes();
  const std::string& max_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_bytes();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_max_bytes();
  void set_allocated_max_bytes(std::string* max_bytes);
  private:
  const std::string& _internal_max_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_bytes(const std::string& value);
  std::string* _internal_mutable_max_bytes();
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.ConsensusParamsEvidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_age_num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_age_duration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetConsensusParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetConsensusParamsRequest) */ {
 public:
  inline GetConsensusParamsRequest() : GetConsensusParamsRequest(nullptr) {}
  ~GetConsensusParamsRequest() override;
  explicit constexpr GetConsensusParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsensusParamsRequest(const GetConsensusParamsRequest& from);
  GetConsensusParamsRequest(GetConsensusParamsRequest&& from) noexcept
    : GetConsensusParamsRequest() {
    *this = ::std::move(from);
  }

  inline GetConsensusParamsRequest& operator=(const GetConsensusParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsensusParamsRequest& operator=(GetConsensusParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsensusParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsensusParamsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsensusParamsRequest*>(
               &_GetConsensusParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetConsensusParamsRequest& a, GetConsensusParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsensusParamsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsensusParamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConsensusParamsRequest* New() const final {
    return new GetConsensusParamsRequest();
  }

  GetConsensusParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConsensusParamsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConsensusParamsRequest& from);
  void MergeFrom(const GetConsensusParamsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsensusParamsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetConsensusParamsRequest";
  }
  protected:
  explicit GetConsensusParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kProveFieldNumber = 2,
  };
  // int64 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool prove = 2;
  void clear_prove();
  bool prove() const;
  void set_prove(bool value);
  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetConsensusParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  bool prove_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// -------------------------------------------------------------------

class GetConsensusParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.dash.platform.dapi.v0.GetConsensusParamsResponse) */ {
 public:
  inline GetConsensusParamsResponse() : GetConsensusParamsResponse(nullptr) {}
  ~GetConsensusParamsResponse() override;
  explicit constexpr GetConsensusParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsensusParamsResponse(const GetConsensusParamsResponse& from);
  GetConsensusParamsResponse(GetConsensusParamsResponse&& from) noexcept
    : GetConsensusParamsResponse() {
    *this = ::std::move(from);
  }

  inline GetConsensusParamsResponse& operator=(const GetConsensusParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsensusParamsResponse& operator=(GetConsensusParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsensusParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsensusParamsResponse* internal_default_instance() {
    return reinterpret_cast<const GetConsensusParamsResponse*>(
               &_GetConsensusParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetConsensusParamsResponse& a, GetConsensusParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsensusParamsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsensusParamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConsensusParamsResponse* New() const final {
    return new GetConsensusParamsResponse();
  }

  GetConsensusParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConsensusParamsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConsensusParamsResponse& from);
  void MergeFrom(const GetConsensusParamsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsensusParamsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.dash.platform.dapi.v0.GetConsensusParamsResponse";
  }
  protected:
  explicit GetConsensusParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kEvidenceFieldNumber = 2,
  };
  // .org.dash.platform.dapi.v0.ConsensusParamsBlock block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::org::dash::platform::dapi::v0::ConsensusParamsBlock& block() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ConsensusParamsBlock* release_block();
  ::org::dash::platform::dapi::v0::ConsensusParamsBlock* mutable_block();
  void set_allocated_block(::org::dash::platform::dapi::v0::ConsensusParamsBlock* block);
  private:
  const ::org::dash::platform::dapi::v0::ConsensusParamsBlock& _internal_block() const;
  ::org::dash::platform::dapi::v0::ConsensusParamsBlock* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::org::dash::platform::dapi::v0::ConsensusParamsBlock* block);
  ::org::dash::platform::dapi::v0::ConsensusParamsBlock* unsafe_arena_release_block();

  // .org.dash.platform.dapi.v0.ConsensusParamsEvidence evidence = 2;
  bool has_evidence() const;
  private:
  bool _internal_has_evidence() const;
  public:
  void clear_evidence();
  const ::org::dash::platform::dapi::v0::ConsensusParamsEvidence& evidence() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* release_evidence();
  ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* mutable_evidence();
  void set_allocated_evidence(::org::dash::platform::dapi::v0::ConsensusParamsEvidence* evidence);
  private:
  const ::org::dash::platform::dapi::v0::ConsensusParamsEvidence& _internal_evidence() const;
  ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* evidence);
  ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* unsafe_arena_release_evidence();

  // @@protoc_insertion_point(class_scope:org.dash.platform.dapi.v0.GetConsensusParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::org::dash::platform::dapi::v0::ConsensusParamsBlock* block_;
  ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* evidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoreTreeProofs

// bytes identities_proof = 1;
inline void StoreTreeProofs::clear_identities_proof() {
  identities_proof_.ClearToEmpty();
}
inline const std::string& StoreTreeProofs::identities_proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StoreTreeProofs.identities_proof)
  return _internal_identities_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreTreeProofs::set_identities_proof(ArgT0&& arg0, ArgT... args) {
 
 identities_proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StoreTreeProofs.identities_proof)
}
inline std::string* StoreTreeProofs::mutable_identities_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.StoreTreeProofs.identities_proof)
  return _internal_mutable_identities_proof();
}
inline const std::string& StoreTreeProofs::_internal_identities_proof() const {
  return identities_proof_.Get();
}
inline void StoreTreeProofs::_internal_set_identities_proof(const std::string& value) {
  
  identities_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::_internal_mutable_identities_proof() {
  
  return identities_proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::release_identities_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.StoreTreeProofs.identities_proof)
  return identities_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreTreeProofs::set_allocated_identities_proof(std::string* identities_proof) {
  if (identities_proof != nullptr) {
    
  } else {
    
  }
  identities_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identities_proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.StoreTreeProofs.identities_proof)
}

// bytes public_key_hashes_to_identity_ids_proof = 2;
inline void StoreTreeProofs::clear_public_key_hashes_to_identity_ids_proof() {
  public_key_hashes_to_identity_ids_proof_.ClearToEmpty();
}
inline const std::string& StoreTreeProofs::public_key_hashes_to_identity_ids_proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StoreTreeProofs.public_key_hashes_to_identity_ids_proof)
  return _internal_public_key_hashes_to_identity_ids_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreTreeProofs::set_public_key_hashes_to_identity_ids_proof(ArgT0&& arg0, ArgT... args) {
 
 public_key_hashes_to_identity_ids_proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StoreTreeProofs.public_key_hashes_to_identity_ids_proof)
}
inline std::string* StoreTreeProofs::mutable_public_key_hashes_to_identity_ids_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.StoreTreeProofs.public_key_hashes_to_identity_ids_proof)
  return _internal_mutable_public_key_hashes_to_identity_ids_proof();
}
inline const std::string& StoreTreeProofs::_internal_public_key_hashes_to_identity_ids_proof() const {
  return public_key_hashes_to_identity_ids_proof_.Get();
}
inline void StoreTreeProofs::_internal_set_public_key_hashes_to_identity_ids_proof(const std::string& value) {
  
  public_key_hashes_to_identity_ids_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::_internal_mutable_public_key_hashes_to_identity_ids_proof() {
  
  return public_key_hashes_to_identity_ids_proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::release_public_key_hashes_to_identity_ids_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.StoreTreeProofs.public_key_hashes_to_identity_ids_proof)
  return public_key_hashes_to_identity_ids_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreTreeProofs::set_allocated_public_key_hashes_to_identity_ids_proof(std::string* public_key_hashes_to_identity_ids_proof) {
  if (public_key_hashes_to_identity_ids_proof != nullptr) {
    
  } else {
    
  }
  public_key_hashes_to_identity_ids_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_hashes_to_identity_ids_proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.StoreTreeProofs.public_key_hashes_to_identity_ids_proof)
}

// bytes data_contracts_proof = 3;
inline void StoreTreeProofs::clear_data_contracts_proof() {
  data_contracts_proof_.ClearToEmpty();
}
inline const std::string& StoreTreeProofs::data_contracts_proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StoreTreeProofs.data_contracts_proof)
  return _internal_data_contracts_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreTreeProofs::set_data_contracts_proof(ArgT0&& arg0, ArgT... args) {
 
 data_contracts_proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StoreTreeProofs.data_contracts_proof)
}
inline std::string* StoreTreeProofs::mutable_data_contracts_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.StoreTreeProofs.data_contracts_proof)
  return _internal_mutable_data_contracts_proof();
}
inline const std::string& StoreTreeProofs::_internal_data_contracts_proof() const {
  return data_contracts_proof_.Get();
}
inline void StoreTreeProofs::_internal_set_data_contracts_proof(const std::string& value) {
  
  data_contracts_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::_internal_mutable_data_contracts_proof() {
  
  return data_contracts_proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::release_data_contracts_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.StoreTreeProofs.data_contracts_proof)
  return data_contracts_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreTreeProofs::set_allocated_data_contracts_proof(std::string* data_contracts_proof) {
  if (data_contracts_proof != nullptr) {
    
  } else {
    
  }
  data_contracts_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_contracts_proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.StoreTreeProofs.data_contracts_proof)
}

// bytes documents_proof = 4;
inline void StoreTreeProofs::clear_documents_proof() {
  documents_proof_.ClearToEmpty();
}
inline const std::string& StoreTreeProofs::documents_proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StoreTreeProofs.documents_proof)
  return _internal_documents_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoreTreeProofs::set_documents_proof(ArgT0&& arg0, ArgT... args) {
 
 documents_proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StoreTreeProofs.documents_proof)
}
inline std::string* StoreTreeProofs::mutable_documents_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.StoreTreeProofs.documents_proof)
  return _internal_mutable_documents_proof();
}
inline const std::string& StoreTreeProofs::_internal_documents_proof() const {
  return documents_proof_.Get();
}
inline void StoreTreeProofs::_internal_set_documents_proof(const std::string& value) {
  
  documents_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::_internal_mutable_documents_proof() {
  
  return documents_proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StoreTreeProofs::release_documents_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.StoreTreeProofs.documents_proof)
  return documents_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StoreTreeProofs::set_allocated_documents_proof(std::string* documents_proof) {
  if (documents_proof != nullptr) {
    
  } else {
    
  }
  documents_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), documents_proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.StoreTreeProofs.documents_proof)
}

// -------------------------------------------------------------------

// Proof

// bytes root_tree_proof = 1;
inline void Proof::clear_root_tree_proof() {
  root_tree_proof_.ClearToEmpty();
}
inline const std::string& Proof::root_tree_proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.Proof.root_tree_proof)
  return _internal_root_tree_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proof::set_root_tree_proof(ArgT0&& arg0, ArgT... args) {
 
 root_tree_proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.Proof.root_tree_proof)
}
inline std::string* Proof::mutable_root_tree_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.Proof.root_tree_proof)
  return _internal_mutable_root_tree_proof();
}
inline const std::string& Proof::_internal_root_tree_proof() const {
  return root_tree_proof_.Get();
}
inline void Proof::_internal_set_root_tree_proof(const std::string& value) {
  
  root_tree_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proof::_internal_mutable_root_tree_proof() {
  
  return root_tree_proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proof::release_root_tree_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.Proof.root_tree_proof)
  return root_tree_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proof::set_allocated_root_tree_proof(std::string* root_tree_proof) {
  if (root_tree_proof != nullptr) {
    
  } else {
    
  }
  root_tree_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_tree_proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.Proof.root_tree_proof)
}

// .org.dash.platform.dapi.v0.StoreTreeProofs store_tree_proofs = 2;
inline bool Proof::_internal_has_store_tree_proofs() const {
  return this != internal_default_instance() && store_tree_proofs_ != nullptr;
}
inline bool Proof::has_store_tree_proofs() const {
  return _internal_has_store_tree_proofs();
}
inline void Proof::clear_store_tree_proofs() {
  if (GetArenaForAllocation() == nullptr && store_tree_proofs_ != nullptr) {
    delete store_tree_proofs_;
  }
  store_tree_proofs_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::StoreTreeProofs& Proof::_internal_store_tree_proofs() const {
  const ::org::dash::platform::dapi::v0::StoreTreeProofs* p = store_tree_proofs_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::StoreTreeProofs&>(
      ::org::dash::platform::dapi::v0::_StoreTreeProofs_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::StoreTreeProofs& Proof::store_tree_proofs() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.Proof.store_tree_proofs)
  return _internal_store_tree_proofs();
}
inline void Proof::unsafe_arena_set_allocated_store_tree_proofs(
    ::org::dash::platform::dapi::v0::StoreTreeProofs* store_tree_proofs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(store_tree_proofs_);
  }
  store_tree_proofs_ = store_tree_proofs;
  if (store_tree_proofs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.Proof.store_tree_proofs)
}
inline ::org::dash::platform::dapi::v0::StoreTreeProofs* Proof::release_store_tree_proofs() {
  
  ::org::dash::platform::dapi::v0::StoreTreeProofs* temp = store_tree_proofs_;
  store_tree_proofs_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::StoreTreeProofs* Proof::unsafe_arena_release_store_tree_proofs() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.Proof.store_tree_proofs)
  
  ::org::dash::platform::dapi::v0::StoreTreeProofs* temp = store_tree_proofs_;
  store_tree_proofs_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::StoreTreeProofs* Proof::_internal_mutable_store_tree_proofs() {
  
  if (store_tree_proofs_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::StoreTreeProofs>(GetArenaForAllocation());
    store_tree_proofs_ = p;
  }
  return store_tree_proofs_;
}
inline ::org::dash::platform::dapi::v0::StoreTreeProofs* Proof::mutable_store_tree_proofs() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.Proof.store_tree_proofs)
  return _internal_mutable_store_tree_proofs();
}
inline void Proof::set_allocated_store_tree_proofs(::org::dash::platform::dapi::v0::StoreTreeProofs* store_tree_proofs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete store_tree_proofs_;
  }
  if (store_tree_proofs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::StoreTreeProofs>::GetOwningArena(store_tree_proofs);
    if (message_arena != submessage_arena) {
      store_tree_proofs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store_tree_proofs, submessage_arena);
    }
    
  } else {
    
  }
  store_tree_proofs_ = store_tree_proofs;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.Proof.store_tree_proofs)
}

// bytes signature_llmq_hash = 3;
inline void Proof::clear_signature_llmq_hash() {
  signature_llmq_hash_.ClearToEmpty();
}
inline const std::string& Proof::signature_llmq_hash() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.Proof.signature_llmq_hash)
  return _internal_signature_llmq_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proof::set_signature_llmq_hash(ArgT0&& arg0, ArgT... args) {
 
 signature_llmq_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.Proof.signature_llmq_hash)
}
inline std::string* Proof::mutable_signature_llmq_hash() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.Proof.signature_llmq_hash)
  return _internal_mutable_signature_llmq_hash();
}
inline const std::string& Proof::_internal_signature_llmq_hash() const {
  return signature_llmq_hash_.Get();
}
inline void Proof::_internal_set_signature_llmq_hash(const std::string& value) {
  
  signature_llmq_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proof::_internal_mutable_signature_llmq_hash() {
  
  return signature_llmq_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proof::release_signature_llmq_hash() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.Proof.signature_llmq_hash)
  return signature_llmq_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proof::set_allocated_signature_llmq_hash(std::string* signature_llmq_hash) {
  if (signature_llmq_hash != nullptr) {
    
  } else {
    
  }
  signature_llmq_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_llmq_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.Proof.signature_llmq_hash)
}

// bytes signature = 4;
inline void Proof::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& Proof::signature() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.Proof.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proof::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.Proof.signature)
}
inline std::string* Proof::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.Proof.signature)
  return _internal_mutable_signature();
}
inline const std::string& Proof::_internal_signature() const {
  return signature_.Get();
}
inline void Proof::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proof::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proof::release_signature() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.Proof.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proof::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.Proof.signature)
}

// -------------------------------------------------------------------

// ResponseMetadata

// int64 height = 1;
inline void ResponseMetadata::clear_height() {
  height_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseMetadata::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseMetadata::height() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ResponseMetadata.height)
  return _internal_height();
}
inline void ResponseMetadata::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void ResponseMetadata::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ResponseMetadata.height)
}

// uint32 core_chain_locked_height = 2;
inline void ResponseMetadata::clear_core_chain_locked_height() {
  core_chain_locked_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseMetadata::_internal_core_chain_locked_height() const {
  return core_chain_locked_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResponseMetadata::core_chain_locked_height() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ResponseMetadata.core_chain_locked_height)
  return _internal_core_chain_locked_height();
}
inline void ResponseMetadata::_internal_set_core_chain_locked_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  core_chain_locked_height_ = value;
}
inline void ResponseMetadata::set_core_chain_locked_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_core_chain_locked_height(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ResponseMetadata.core_chain_locked_height)
}

// -------------------------------------------------------------------

// StateTransitionBroadcastError

// uint32 code = 1;
inline void StateTransitionBroadcastError::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateTransitionBroadcastError::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateTransitionBroadcastError::code() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StateTransitionBroadcastError.code)
  return _internal_code();
}
inline void StateTransitionBroadcastError::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void StateTransitionBroadcastError::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StateTransitionBroadcastError.code)
}

// string message = 2;
inline void StateTransitionBroadcastError::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& StateTransitionBroadcastError::message() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateTransitionBroadcastError::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
}
inline std::string* StateTransitionBroadcastError::mutable_message() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
  return _internal_mutable_message();
}
inline const std::string& StateTransitionBroadcastError::_internal_message() const {
  return message_.Get();
}
inline void StateTransitionBroadcastError::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StateTransitionBroadcastError::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StateTransitionBroadcastError::release_message() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StateTransitionBroadcastError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.StateTransitionBroadcastError.message)
}

// bytes data = 3;
inline void StateTransitionBroadcastError::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& StateTransitionBroadcastError::data() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateTransitionBroadcastError::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
}
inline std::string* StateTransitionBroadcastError::mutable_data() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
  return _internal_mutable_data();
}
inline const std::string& StateTransitionBroadcastError::_internal_data() const {
  return data_.Get();
}
inline void StateTransitionBroadcastError::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StateTransitionBroadcastError::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StateTransitionBroadcastError::release_data() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StateTransitionBroadcastError::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.StateTransitionBroadcastError.data)
}

// -------------------------------------------------------------------

// BroadcastStateTransitionRequest

// bytes state_transition = 1;
inline void BroadcastStateTransitionRequest::clear_state_transition() {
  state_transition_.ClearToEmpty();
}
inline const std::string& BroadcastStateTransitionRequest::state_transition() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
  return _internal_state_transition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastStateTransitionRequest::set_state_transition(ArgT0&& arg0, ArgT... args) {
 
 state_transition_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
}
inline std::string* BroadcastStateTransitionRequest::mutable_state_transition() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
  return _internal_mutable_state_transition();
}
inline const std::string& BroadcastStateTransitionRequest::_internal_state_transition() const {
  return state_transition_.Get();
}
inline void BroadcastStateTransitionRequest::_internal_set_state_transition(const std::string& value) {
  
  state_transition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BroadcastStateTransitionRequest::_internal_mutable_state_transition() {
  
  return state_transition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BroadcastStateTransitionRequest::release_state_transition() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
  return state_transition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BroadcastStateTransitionRequest::set_allocated_state_transition(std::string* state_transition) {
  if (state_transition != nullptr) {
    
  } else {
    
  }
  state_transition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_transition,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.BroadcastStateTransitionRequest.state_transition)
}

// -------------------------------------------------------------------

// BroadcastStateTransitionResponse

// -------------------------------------------------------------------

// GetIdentityRequest

// bytes id = 1;
inline void GetIdentityRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetIdentityRequest::id() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIdentityRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityRequest.id)
}
inline std::string* GetIdentityRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetIdentityRequest::_internal_id() const {
  return id_.Get();
}
inline void GetIdentityRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetIdentityRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetIdentityRequest::release_id() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentityRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetIdentityRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentityRequest.id)
}

// bool prove = 2;
inline void GetIdentityRequest::clear_prove() {
  prove_ = false;
}
inline bool GetIdentityRequest::_internal_prove() const {
  return prove_;
}
inline bool GetIdentityRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityRequest.prove)
  return _internal_prove();
}
inline void GetIdentityRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void GetIdentityRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityRequest.prove)
}

// -------------------------------------------------------------------

// GetIdentityResponse

// bytes identity = 1;
inline void GetIdentityResponse::clear_identity() {
  identity_.ClearToEmpty();
}
inline const std::string& GetIdentityResponse::identity() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityResponse.identity)
  return _internal_identity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIdentityResponse::set_identity(ArgT0&& arg0, ArgT... args) {
 
 identity_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityResponse.identity)
}
inline std::string* GetIdentityResponse::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityResponse.identity)
  return _internal_mutable_identity();
}
inline const std::string& GetIdentityResponse::_internal_identity() const {
  return identity_.Get();
}
inline void GetIdentityResponse::_internal_set_identity(const std::string& value) {
  
  identity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetIdentityResponse::_internal_mutable_identity() {
  
  return identity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetIdentityResponse::release_identity() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentityResponse.identity)
  return identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetIdentityResponse::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentityResponse.identity)
}

// .org.dash.platform.dapi.v0.Proof proof = 2;
inline bool GetIdentityResponse::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool GetIdentityResponse::has_proof() const {
  return _internal_has_proof();
}
inline void GetIdentityResponse::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::Proof& GetIdentityResponse::_internal_proof() const {
  const ::org::dash::platform::dapi::v0::Proof* p = proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::Proof&>(
      ::org::dash::platform::dapi::v0::_Proof_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::Proof& GetIdentityResponse::proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityResponse.proof)
  return _internal_proof();
}
inline void GetIdentityResponse::unsafe_arena_set_allocated_proof(
    ::org::dash::platform::dapi::v0::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetIdentityResponse.proof)
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityResponse::release_proof() {
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentityResponse.proof)
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityResponse::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::Proof>(GetArenaForAllocation());
    proof_ = p;
  }
  return proof_;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityResponse.proof)
  return _internal_mutable_proof();
}
inline void GetIdentityResponse::set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::Proof>::GetOwningArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentityResponse.proof)
}

// .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
inline bool GetIdentityResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetIdentityResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void GetIdentityResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetIdentityResponse::_internal_metadata() const {
  const ::org::dash::platform::dapi::v0::ResponseMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ResponseMetadata&>(
      ::org::dash::platform::dapi::v0::_ResponseMetadata_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetIdentityResponse::metadata() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityResponse.metadata)
  return _internal_metadata();
}
inline void GetIdentityResponse::unsafe_arena_set_allocated_metadata(
    ::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetIdentityResponse.metadata)
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityResponse::release_metadata() {
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentityResponse.metadata)
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityResponse.metadata)
  return _internal_mutable_metadata();
}
inline void GetIdentityResponse::set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ResponseMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentityResponse.metadata)
}

// -------------------------------------------------------------------

// GetDataContractRequest

// bytes id = 1;
inline void GetDataContractRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetDataContractRequest::id() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDataContractRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataContractRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDataContractRequest.id)
}
inline std::string* GetDataContractRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDataContractRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetDataContractRequest::_internal_id() const {
  return id_.Get();
}
inline void GetDataContractRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDataContractRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDataContractRequest::release_id() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDataContractRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDataContractRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDataContractRequest.id)
}

// bool prove = 2;
inline void GetDataContractRequest::clear_prove() {
  prove_ = false;
}
inline bool GetDataContractRequest::_internal_prove() const {
  return prove_;
}
inline bool GetDataContractRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDataContractRequest.prove)
  return _internal_prove();
}
inline void GetDataContractRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void GetDataContractRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDataContractRequest.prove)
}

// -------------------------------------------------------------------

// GetDataContractResponse

// bytes data_contract = 1;
inline void GetDataContractResponse::clear_data_contract() {
  data_contract_.ClearToEmpty();
}
inline const std::string& GetDataContractResponse::data_contract() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDataContractResponse.data_contract)
  return _internal_data_contract();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDataContractResponse::set_data_contract(ArgT0&& arg0, ArgT... args) {
 
 data_contract_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDataContractResponse.data_contract)
}
inline std::string* GetDataContractResponse::mutable_data_contract() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDataContractResponse.data_contract)
  return _internal_mutable_data_contract();
}
inline const std::string& GetDataContractResponse::_internal_data_contract() const {
  return data_contract_.Get();
}
inline void GetDataContractResponse::_internal_set_data_contract(const std::string& value) {
  
  data_contract_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDataContractResponse::_internal_mutable_data_contract() {
  
  return data_contract_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDataContractResponse::release_data_contract() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDataContractResponse.data_contract)
  return data_contract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDataContractResponse::set_allocated_data_contract(std::string* data_contract) {
  if (data_contract != nullptr) {
    
  } else {
    
  }
  data_contract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_contract,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDataContractResponse.data_contract)
}

// .org.dash.platform.dapi.v0.Proof proof = 2;
inline bool GetDataContractResponse::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool GetDataContractResponse::has_proof() const {
  return _internal_has_proof();
}
inline void GetDataContractResponse::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::Proof& GetDataContractResponse::_internal_proof() const {
  const ::org::dash::platform::dapi::v0::Proof* p = proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::Proof&>(
      ::org::dash::platform::dapi::v0::_Proof_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::Proof& GetDataContractResponse::proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDataContractResponse.proof)
  return _internal_proof();
}
inline void GetDataContractResponse::unsafe_arena_set_allocated_proof(
    ::org::dash::platform::dapi::v0::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetDataContractResponse.proof)
}
inline ::org::dash::platform::dapi::v0::Proof* GetDataContractResponse::release_proof() {
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetDataContractResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDataContractResponse.proof)
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetDataContractResponse::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::Proof>(GetArenaForAllocation());
    proof_ = p;
  }
  return proof_;
}
inline ::org::dash::platform::dapi::v0::Proof* GetDataContractResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDataContractResponse.proof)
  return _internal_mutable_proof();
}
inline void GetDataContractResponse::set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::Proof>::GetOwningArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDataContractResponse.proof)
}

// .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
inline bool GetDataContractResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetDataContractResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void GetDataContractResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetDataContractResponse::_internal_metadata() const {
  const ::org::dash::platform::dapi::v0::ResponseMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ResponseMetadata&>(
      ::org::dash::platform::dapi::v0::_ResponseMetadata_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetDataContractResponse::metadata() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDataContractResponse.metadata)
  return _internal_metadata();
}
inline void GetDataContractResponse::unsafe_arena_set_allocated_metadata(
    ::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetDataContractResponse.metadata)
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDataContractResponse::release_metadata() {
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDataContractResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDataContractResponse.metadata)
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDataContractResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDataContractResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDataContractResponse.metadata)
  return _internal_mutable_metadata();
}
inline void GetDataContractResponse::set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ResponseMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDataContractResponse.metadata)
}

// -------------------------------------------------------------------

// GetDocumentsRequest

// bytes data_contract_id = 1;
inline void GetDocumentsRequest::clear_data_contract_id() {
  data_contract_id_.ClearToEmpty();
}
inline const std::string& GetDocumentsRequest::data_contract_id() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
  return _internal_data_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDocumentsRequest::set_data_contract_id(ArgT0&& arg0, ArgT... args) {
 
 data_contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
}
inline std::string* GetDocumentsRequest::mutable_data_contract_id() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
  return _internal_mutable_data_contract_id();
}
inline const std::string& GetDocumentsRequest::_internal_data_contract_id() const {
  return data_contract_id_.Get();
}
inline void GetDocumentsRequest::_internal_set_data_contract_id(const std::string& value) {
  
  data_contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::_internal_mutable_data_contract_id() {
  
  return data_contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::release_data_contract_id() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
  return data_contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDocumentsRequest::set_allocated_data_contract_id(std::string* data_contract_id) {
  if (data_contract_id != nullptr) {
    
  } else {
    
  }
  data_contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDocumentsRequest.data_contract_id)
}

// string document_type = 2;
inline void GetDocumentsRequest::clear_document_type() {
  document_type_.ClearToEmpty();
}
inline const std::string& GetDocumentsRequest::document_type() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
  return _internal_document_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDocumentsRequest::set_document_type(ArgT0&& arg0, ArgT... args) {
 
 document_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
}
inline std::string* GetDocumentsRequest::mutable_document_type() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
  return _internal_mutable_document_type();
}
inline const std::string& GetDocumentsRequest::_internal_document_type() const {
  return document_type_.Get();
}
inline void GetDocumentsRequest::_internal_set_document_type(const std::string& value) {
  
  document_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::_internal_mutable_document_type() {
  
  return document_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::release_document_type() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
  return document_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDocumentsRequest::set_allocated_document_type(std::string* document_type) {
  if (document_type != nullptr) {
    
  } else {
    
  }
  document_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDocumentsRequest.document_type)
}

// bytes where = 3;
inline void GetDocumentsRequest::clear_where() {
  where_.ClearToEmpty();
}
inline const std::string& GetDocumentsRequest::where() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
  return _internal_where();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDocumentsRequest::set_where(ArgT0&& arg0, ArgT... args) {
 
 where_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
}
inline std::string* GetDocumentsRequest::mutable_where() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
  return _internal_mutable_where();
}
inline const std::string& GetDocumentsRequest::_internal_where() const {
  return where_.Get();
}
inline void GetDocumentsRequest::_internal_set_where(const std::string& value) {
  
  where_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::_internal_mutable_where() {
  
  return where_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::release_where() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
  return where_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDocumentsRequest::set_allocated_where(std::string* where) {
  if (where != nullptr) {
    
  } else {
    
  }
  where_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), where,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDocumentsRequest.where)
}

// bytes order_by = 4;
inline void GetDocumentsRequest::clear_order_by() {
  order_by_.ClearToEmpty();
}
inline const std::string& GetDocumentsRequest::order_by() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
  return _internal_order_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDocumentsRequest::set_order_by(ArgT0&& arg0, ArgT... args) {
 
 order_by_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
}
inline std::string* GetDocumentsRequest::mutable_order_by() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
  return _internal_mutable_order_by();
}
inline const std::string& GetDocumentsRequest::_internal_order_by() const {
  return order_by_.Get();
}
inline void GetDocumentsRequest::_internal_set_order_by(const std::string& value) {
  
  order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::_internal_mutable_order_by() {
  
  return order_by_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetDocumentsRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
  return order_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetDocumentsRequest::set_allocated_order_by(std::string* order_by) {
  if (order_by != nullptr) {
    
  } else {
    
  }
  order_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_by,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDocumentsRequest.order_by)
}

// uint32 limit = 5;
inline void GetDocumentsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDocumentsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDocumentsRequest::limit() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.limit)
  return _internal_limit();
}
inline void GetDocumentsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetDocumentsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.limit)
}

// uint32 start_after = 6;
inline bool GetDocumentsRequest::_internal_has_start_after() const {
  return start_case() == kStartAfter;
}
inline bool GetDocumentsRequest::has_start_after() const {
  return _internal_has_start_after();
}
inline void GetDocumentsRequest::set_has_start_after() {
  _oneof_case_[0] = kStartAfter;
}
inline void GetDocumentsRequest::clear_start_after() {
  if (_internal_has_start_after()) {
    start_.start_after_ = 0u;
    clear_has_start();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDocumentsRequest::_internal_start_after() const {
  if (_internal_has_start_after()) {
    return start_.start_after_;
  }
  return 0u;
}
inline void GetDocumentsRequest::_internal_set_start_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_start_after()) {
    clear_start();
    set_has_start_after();
  }
  start_.start_after_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDocumentsRequest::start_after() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.start_after)
  return _internal_start_after();
}
inline void GetDocumentsRequest::set_start_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_after(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.start_after)
}

// uint32 start_at = 7;
inline bool GetDocumentsRequest::_internal_has_start_at() const {
  return start_case() == kStartAt;
}
inline bool GetDocumentsRequest::has_start_at() const {
  return _internal_has_start_at();
}
inline void GetDocumentsRequest::set_has_start_at() {
  _oneof_case_[0] = kStartAt;
}
inline void GetDocumentsRequest::clear_start_at() {
  if (_internal_has_start_at()) {
    start_.start_at_ = 0u;
    clear_has_start();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDocumentsRequest::_internal_start_at() const {
  if (_internal_has_start_at()) {
    return start_.start_at_;
  }
  return 0u;
}
inline void GetDocumentsRequest::_internal_set_start_at(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_start_at()) {
    clear_start();
    set_has_start_at();
  }
  start_.start_at_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetDocumentsRequest::start_at() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.start_at)
  return _internal_start_at();
}
inline void GetDocumentsRequest::set_start_at(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_at(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.start_at)
}

// bool prove = 8;
inline void GetDocumentsRequest::clear_prove() {
  prove_ = false;
}
inline bool GetDocumentsRequest::_internal_prove() const {
  return prove_;
}
inline bool GetDocumentsRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsRequest.prove)
  return _internal_prove();
}
inline void GetDocumentsRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void GetDocumentsRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsRequest.prove)
}

inline bool GetDocumentsRequest::has_start() const {
  return start_case() != START_NOT_SET;
}
inline void GetDocumentsRequest::clear_has_start() {
  _oneof_case_[0] = START_NOT_SET;
}
inline GetDocumentsRequest::StartCase GetDocumentsRequest::start_case() const {
  return GetDocumentsRequest::StartCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDocumentsResponse

// repeated bytes documents = 1;
inline int GetDocumentsResponse::_internal_documents_size() const {
  return documents_.size();
}
inline int GetDocumentsResponse::documents_size() const {
  return _internal_documents_size();
}
inline void GetDocumentsResponse::clear_documents() {
  documents_.Clear();
}
inline std::string* GetDocumentsResponse::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  return _internal_add_documents();
}
inline const std::string& GetDocumentsResponse::_internal_documents(int index) const {
  return documents_.Get(index);
}
inline const std::string& GetDocumentsResponse::documents(int index) const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  return _internal_documents(index);
}
inline std::string* GetDocumentsResponse::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  return documents_.Mutable(index);
}
inline void GetDocumentsResponse::set_documents(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  documents_.Mutable(index)->assign(value);
}
inline void GetDocumentsResponse::set_documents(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
inline void GetDocumentsResponse::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
}
inline void GetDocumentsResponse::set_documents(int index, const void* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
}
inline std::string* GetDocumentsResponse::_internal_add_documents() {
  return documents_.Add();
}
inline void GetDocumentsResponse::add_documents(const std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
}
inline void GetDocumentsResponse::add_documents(std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
}
inline void GetDocumentsResponse::add_documents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
}
inline void GetDocumentsResponse::add_documents(const void* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetDocumentsResponse::documents() const {
  // @@protoc_insertion_point(field_list:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  return documents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetDocumentsResponse::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:org.dash.platform.dapi.v0.GetDocumentsResponse.documents)
  return &documents_;
}

// .org.dash.platform.dapi.v0.Proof proof = 2;
inline bool GetDocumentsResponse::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool GetDocumentsResponse::has_proof() const {
  return _internal_has_proof();
}
inline void GetDocumentsResponse::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::Proof& GetDocumentsResponse::_internal_proof() const {
  const ::org::dash::platform::dapi::v0::Proof* p = proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::Proof&>(
      ::org::dash::platform::dapi::v0::_Proof_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::Proof& GetDocumentsResponse::proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsResponse.proof)
  return _internal_proof();
}
inline void GetDocumentsResponse::unsafe_arena_set_allocated_proof(
    ::org::dash::platform::dapi::v0::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetDocumentsResponse.proof)
}
inline ::org::dash::platform::dapi::v0::Proof* GetDocumentsResponse::release_proof() {
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetDocumentsResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDocumentsResponse.proof)
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetDocumentsResponse::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::Proof>(GetArenaForAllocation());
    proof_ = p;
  }
  return proof_;
}
inline ::org::dash::platform::dapi::v0::Proof* GetDocumentsResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsResponse.proof)
  return _internal_mutable_proof();
}
inline void GetDocumentsResponse::set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::Proof>::GetOwningArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDocumentsResponse.proof)
}

// .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
inline bool GetDocumentsResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetDocumentsResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void GetDocumentsResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetDocumentsResponse::_internal_metadata() const {
  const ::org::dash::platform::dapi::v0::ResponseMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ResponseMetadata&>(
      ::org::dash::platform::dapi::v0::_ResponseMetadata_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetDocumentsResponse::metadata() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetDocumentsResponse.metadata)
  return _internal_metadata();
}
inline void GetDocumentsResponse::unsafe_arena_set_allocated_metadata(
    ::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetDocumentsResponse.metadata)
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDocumentsResponse::release_metadata() {
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDocumentsResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetDocumentsResponse.metadata)
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDocumentsResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetDocumentsResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetDocumentsResponse.metadata)
  return _internal_mutable_metadata();
}
inline void GetDocumentsResponse::set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ResponseMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetDocumentsResponse.metadata)
}

// -------------------------------------------------------------------

// GetIdentitiesByPublicKeyHashesRequest

// repeated bytes public_key_hashes = 1;
inline int GetIdentitiesByPublicKeyHashesRequest::_internal_public_key_hashes_size() const {
  return public_key_hashes_.size();
}
inline int GetIdentitiesByPublicKeyHashesRequest::public_key_hashes_size() const {
  return _internal_public_key_hashes_size();
}
inline void GetIdentitiesByPublicKeyHashesRequest::clear_public_key_hashes() {
  public_key_hashes_.Clear();
}
inline std::string* GetIdentitiesByPublicKeyHashesRequest::add_public_key_hashes() {
  // @@protoc_insertion_point(field_add_mutable:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  return _internal_add_public_key_hashes();
}
inline const std::string& GetIdentitiesByPublicKeyHashesRequest::_internal_public_key_hashes(int index) const {
  return public_key_hashes_.Get(index);
}
inline const std::string& GetIdentitiesByPublicKeyHashesRequest::public_key_hashes(int index) const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  return _internal_public_key_hashes(index);
}
inline std::string* GetIdentitiesByPublicKeyHashesRequest::mutable_public_key_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  return public_key_hashes_.Mutable(index);
}
inline void GetIdentitiesByPublicKeyHashesRequest::set_public_key_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  public_key_hashes_.Mutable(index)->assign(value);
}
inline void GetIdentitiesByPublicKeyHashesRequest::set_public_key_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  public_key_hashes_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentitiesByPublicKeyHashesRequest::set_public_key_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentitiesByPublicKeyHashesRequest::set_public_key_hashes(int index, const void* value, size_t size) {
  public_key_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
}
inline std::string* GetIdentitiesByPublicKeyHashesRequest::_internal_add_public_key_hashes() {
  return public_key_hashes_.Add();
}
inline void GetIdentitiesByPublicKeyHashesRequest::add_public_key_hashes(const std::string& value) {
  public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentitiesByPublicKeyHashesRequest::add_public_key_hashes(std::string&& value) {
  public_key_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentitiesByPublicKeyHashesRequest::add_public_key_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentitiesByPublicKeyHashesRequest::add_public_key_hashes(const void* value, size_t size) {
  public_key_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentitiesByPublicKeyHashesRequest::public_key_hashes() const {
  // @@protoc_insertion_point(field_list:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  return public_key_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentitiesByPublicKeyHashesRequest::mutable_public_key_hashes() {
  // @@protoc_insertion_point(field_mutable_list:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.public_key_hashes)
  return &public_key_hashes_;
}

// bool prove = 2;
inline void GetIdentitiesByPublicKeyHashesRequest::clear_prove() {
  prove_ = false;
}
inline bool GetIdentitiesByPublicKeyHashesRequest::_internal_prove() const {
  return prove_;
}
inline bool GetIdentitiesByPublicKeyHashesRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.prove)
  return _internal_prove();
}
inline void GetIdentitiesByPublicKeyHashesRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void GetIdentitiesByPublicKeyHashesRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesRequest.prove)
}

// -------------------------------------------------------------------

// GetIdentitiesByPublicKeyHashesResponse

// repeated bytes identities = 1;
inline int GetIdentitiesByPublicKeyHashesResponse::_internal_identities_size() const {
  return identities_.size();
}
inline int GetIdentitiesByPublicKeyHashesResponse::identities_size() const {
  return _internal_identities_size();
}
inline void GetIdentitiesByPublicKeyHashesResponse::clear_identities() {
  identities_.Clear();
}
inline std::string* GetIdentitiesByPublicKeyHashesResponse::add_identities() {
  // @@protoc_insertion_point(field_add_mutable:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  return _internal_add_identities();
}
inline const std::string& GetIdentitiesByPublicKeyHashesResponse::_internal_identities(int index) const {
  return identities_.Get(index);
}
inline const std::string& GetIdentitiesByPublicKeyHashesResponse::identities(int index) const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  return _internal_identities(index);
}
inline std::string* GetIdentitiesByPublicKeyHashesResponse::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  return identities_.Mutable(index);
}
inline void GetIdentitiesByPublicKeyHashesResponse::set_identities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  identities_.Mutable(index)->assign(value);
}
inline void GetIdentitiesByPublicKeyHashesResponse::set_identities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  identities_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentitiesByPublicKeyHashesResponse::set_identities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
}
inline void GetIdentitiesByPublicKeyHashesResponse::set_identities(int index, const void* value, size_t size) {
  identities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
}
inline std::string* GetIdentitiesByPublicKeyHashesResponse::_internal_add_identities() {
  return identities_.Add();
}
inline void GetIdentitiesByPublicKeyHashesResponse::add_identities(const std::string& value) {
  identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
}
inline void GetIdentitiesByPublicKeyHashesResponse::add_identities(std::string&& value) {
  identities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
}
inline void GetIdentitiesByPublicKeyHashesResponse::add_identities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
}
inline void GetIdentitiesByPublicKeyHashesResponse::add_identities(const void* value, size_t size) {
  identities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentitiesByPublicKeyHashesResponse::identities() const {
  // @@protoc_insertion_point(field_list:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  return identities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentitiesByPublicKeyHashesResponse::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.identities)
  return &identities_;
}

// .org.dash.platform.dapi.v0.Proof proof = 2;
inline bool GetIdentitiesByPublicKeyHashesResponse::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool GetIdentitiesByPublicKeyHashesResponse::has_proof() const {
  return _internal_has_proof();
}
inline void GetIdentitiesByPublicKeyHashesResponse::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::Proof& GetIdentitiesByPublicKeyHashesResponse::_internal_proof() const {
  const ::org::dash::platform::dapi::v0::Proof* p = proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::Proof&>(
      ::org::dash::platform::dapi::v0::_Proof_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::Proof& GetIdentitiesByPublicKeyHashesResponse::proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.proof)
  return _internal_proof();
}
inline void GetIdentitiesByPublicKeyHashesResponse::unsafe_arena_set_allocated_proof(
    ::org::dash::platform::dapi::v0::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.proof)
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentitiesByPublicKeyHashesResponse::release_proof() {
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentitiesByPublicKeyHashesResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.proof)
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentitiesByPublicKeyHashesResponse::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::Proof>(GetArenaForAllocation());
    proof_ = p;
  }
  return proof_;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentitiesByPublicKeyHashesResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.proof)
  return _internal_mutable_proof();
}
inline void GetIdentitiesByPublicKeyHashesResponse::set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::Proof>::GetOwningArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.proof)
}

// .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
inline bool GetIdentitiesByPublicKeyHashesResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetIdentitiesByPublicKeyHashesResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void GetIdentitiesByPublicKeyHashesResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetIdentitiesByPublicKeyHashesResponse::_internal_metadata() const {
  const ::org::dash::platform::dapi::v0::ResponseMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ResponseMetadata&>(
      ::org::dash::platform::dapi::v0::_ResponseMetadata_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetIdentitiesByPublicKeyHashesResponse::metadata() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.metadata)
  return _internal_metadata();
}
inline void GetIdentitiesByPublicKeyHashesResponse::unsafe_arena_set_allocated_metadata(
    ::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.metadata)
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentitiesByPublicKeyHashesResponse::release_metadata() {
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentitiesByPublicKeyHashesResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.metadata)
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentitiesByPublicKeyHashesResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentitiesByPublicKeyHashesResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.metadata)
  return _internal_mutable_metadata();
}
inline void GetIdentitiesByPublicKeyHashesResponse::set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ResponseMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentitiesByPublicKeyHashesResponse.metadata)
}

// -------------------------------------------------------------------

// GetIdentityIdsByPublicKeyHashesRequest

// repeated bytes public_key_hashes = 1;
inline int GetIdentityIdsByPublicKeyHashesRequest::_internal_public_key_hashes_size() const {
  return public_key_hashes_.size();
}
inline int GetIdentityIdsByPublicKeyHashesRequest::public_key_hashes_size() const {
  return _internal_public_key_hashes_size();
}
inline void GetIdentityIdsByPublicKeyHashesRequest::clear_public_key_hashes() {
  public_key_hashes_.Clear();
}
inline std::string* GetIdentityIdsByPublicKeyHashesRequest::add_public_key_hashes() {
  // @@protoc_insertion_point(field_add_mutable:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  return _internal_add_public_key_hashes();
}
inline const std::string& GetIdentityIdsByPublicKeyHashesRequest::_internal_public_key_hashes(int index) const {
  return public_key_hashes_.Get(index);
}
inline const std::string& GetIdentityIdsByPublicKeyHashesRequest::public_key_hashes(int index) const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  return _internal_public_key_hashes(index);
}
inline std::string* GetIdentityIdsByPublicKeyHashesRequest::mutable_public_key_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  return public_key_hashes_.Mutable(index);
}
inline void GetIdentityIdsByPublicKeyHashesRequest::set_public_key_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  public_key_hashes_.Mutable(index)->assign(value);
}
inline void GetIdentityIdsByPublicKeyHashesRequest::set_public_key_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  public_key_hashes_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentityIdsByPublicKeyHashesRequest::set_public_key_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentityIdsByPublicKeyHashesRequest::set_public_key_hashes(int index, const void* value, size_t size) {
  public_key_hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
}
inline std::string* GetIdentityIdsByPublicKeyHashesRequest::_internal_add_public_key_hashes() {
  return public_key_hashes_.Add();
}
inline void GetIdentityIdsByPublicKeyHashesRequest::add_public_key_hashes(const std::string& value) {
  public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentityIdsByPublicKeyHashesRequest::add_public_key_hashes(std::string&& value) {
  public_key_hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentityIdsByPublicKeyHashesRequest::add_public_key_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_key_hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
}
inline void GetIdentityIdsByPublicKeyHashesRequest::add_public_key_hashes(const void* value, size_t size) {
  public_key_hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentityIdsByPublicKeyHashesRequest::public_key_hashes() const {
  // @@protoc_insertion_point(field_list:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  return public_key_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentityIdsByPublicKeyHashesRequest::mutable_public_key_hashes() {
  // @@protoc_insertion_point(field_mutable_list:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.public_key_hashes)
  return &public_key_hashes_;
}

// bool prove = 2;
inline void GetIdentityIdsByPublicKeyHashesRequest::clear_prove() {
  prove_ = false;
}
inline bool GetIdentityIdsByPublicKeyHashesRequest::_internal_prove() const {
  return prove_;
}
inline bool GetIdentityIdsByPublicKeyHashesRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.prove)
  return _internal_prove();
}
inline void GetIdentityIdsByPublicKeyHashesRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void GetIdentityIdsByPublicKeyHashesRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesRequest.prove)
}

// -------------------------------------------------------------------

// GetIdentityIdsByPublicKeyHashesResponse

// repeated bytes identity_ids = 1;
inline int GetIdentityIdsByPublicKeyHashesResponse::_internal_identity_ids_size() const {
  return identity_ids_.size();
}
inline int GetIdentityIdsByPublicKeyHashesResponse::identity_ids_size() const {
  return _internal_identity_ids_size();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::clear_identity_ids() {
  identity_ids_.Clear();
}
inline std::string* GetIdentityIdsByPublicKeyHashesResponse::add_identity_ids() {
  // @@protoc_insertion_point(field_add_mutable:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  return _internal_add_identity_ids();
}
inline const std::string& GetIdentityIdsByPublicKeyHashesResponse::_internal_identity_ids(int index) const {
  return identity_ids_.Get(index);
}
inline const std::string& GetIdentityIdsByPublicKeyHashesResponse::identity_ids(int index) const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  return _internal_identity_ids(index);
}
inline std::string* GetIdentityIdsByPublicKeyHashesResponse::mutable_identity_ids(int index) {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  return identity_ids_.Mutable(index);
}
inline void GetIdentityIdsByPublicKeyHashesResponse::set_identity_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  identity_ids_.Mutable(index)->assign(value);
}
inline void GetIdentityIdsByPublicKeyHashesResponse::set_identity_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  identity_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetIdentityIdsByPublicKeyHashesResponse::set_identity_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identity_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
}
inline void GetIdentityIdsByPublicKeyHashesResponse::set_identity_ids(int index, const void* value, size_t size) {
  identity_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
}
inline std::string* GetIdentityIdsByPublicKeyHashesResponse::_internal_add_identity_ids() {
  return identity_ids_.Add();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::add_identity_ids(const std::string& value) {
  identity_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
}
inline void GetIdentityIdsByPublicKeyHashesResponse::add_identity_ids(std::string&& value) {
  identity_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
}
inline void GetIdentityIdsByPublicKeyHashesResponse::add_identity_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identity_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
}
inline void GetIdentityIdsByPublicKeyHashesResponse::add_identity_ids(const void* value, size_t size) {
  identity_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetIdentityIdsByPublicKeyHashesResponse::identity_ids() const {
  // @@protoc_insertion_point(field_list:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  return identity_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetIdentityIdsByPublicKeyHashesResponse::mutable_identity_ids() {
  // @@protoc_insertion_point(field_mutable_list:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.identity_ids)
  return &identity_ids_;
}

// .org.dash.platform.dapi.v0.Proof proof = 2;
inline bool GetIdentityIdsByPublicKeyHashesResponse::_internal_has_proof() const {
  return this != internal_default_instance() && proof_ != nullptr;
}
inline bool GetIdentityIdsByPublicKeyHashesResponse::has_proof() const {
  return _internal_has_proof();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::clear_proof() {
  if (GetArenaForAllocation() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::Proof& GetIdentityIdsByPublicKeyHashesResponse::_internal_proof() const {
  const ::org::dash::platform::dapi::v0::Proof* p = proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::Proof&>(
      ::org::dash::platform::dapi::v0::_Proof_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::Proof& GetIdentityIdsByPublicKeyHashesResponse::proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.proof)
  return _internal_proof();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::unsafe_arena_set_allocated_proof(
    ::org::dash::platform::dapi::v0::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_);
  }
  proof_ = proof;
  if (proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.proof)
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityIdsByPublicKeyHashesResponse::release_proof() {
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityIdsByPublicKeyHashesResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.proof)
  
  ::org::dash::platform::dapi::v0::Proof* temp = proof_;
  proof_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityIdsByPublicKeyHashesResponse::_internal_mutable_proof() {
  
  if (proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::Proof>(GetArenaForAllocation());
    proof_ = p;
  }
  return proof_;
}
inline ::org::dash::platform::dapi::v0::Proof* GetIdentityIdsByPublicKeyHashesResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.proof)
  return _internal_mutable_proof();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proof_;
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::Proof>::GetOwningArena(proof);
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    
  } else {
    
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.proof)
}

// .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
inline bool GetIdentityIdsByPublicKeyHashesResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetIdentityIdsByPublicKeyHashesResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetIdentityIdsByPublicKeyHashesResponse::_internal_metadata() const {
  const ::org::dash::platform::dapi::v0::ResponseMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ResponseMetadata&>(
      ::org::dash::platform::dapi::v0::_ResponseMetadata_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& GetIdentityIdsByPublicKeyHashesResponse::metadata() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.metadata)
  return _internal_metadata();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::unsafe_arena_set_allocated_metadata(
    ::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.metadata)
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityIdsByPublicKeyHashesResponse::release_metadata() {
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityIdsByPublicKeyHashesResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.metadata)
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityIdsByPublicKeyHashesResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* GetIdentityIdsByPublicKeyHashesResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.metadata)
  return _internal_mutable_metadata();
}
inline void GetIdentityIdsByPublicKeyHashesResponse::set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ResponseMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetIdentityIdsByPublicKeyHashesResponse.metadata)
}

// -------------------------------------------------------------------

// WaitForStateTransitionResultRequest

// bytes state_transition_hash = 1;
inline void WaitForStateTransitionResultRequest::clear_state_transition_hash() {
  state_transition_hash_.ClearToEmpty();
}
inline const std::string& WaitForStateTransitionResultRequest::state_transition_hash() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
  return _internal_state_transition_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitForStateTransitionResultRequest::set_state_transition_hash(ArgT0&& arg0, ArgT... args) {
 
 state_transition_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
}
inline std::string* WaitForStateTransitionResultRequest::mutable_state_transition_hash() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
  return _internal_mutable_state_transition_hash();
}
inline const std::string& WaitForStateTransitionResultRequest::_internal_state_transition_hash() const {
  return state_transition_hash_.Get();
}
inline void WaitForStateTransitionResultRequest::_internal_set_state_transition_hash(const std::string& value) {
  
  state_transition_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WaitForStateTransitionResultRequest::_internal_mutable_state_transition_hash() {
  
  return state_transition_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WaitForStateTransitionResultRequest::release_state_transition_hash() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
  return state_transition_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WaitForStateTransitionResultRequest::set_allocated_state_transition_hash(std::string* state_transition_hash) {
  if (state_transition_hash != nullptr) {
    
  } else {
    
  }
  state_transition_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_transition_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.state_transition_hash)
}

// bool prove = 2;
inline void WaitForStateTransitionResultRequest::clear_prove() {
  prove_ = false;
}
inline bool WaitForStateTransitionResultRequest::_internal_prove() const {
  return prove_;
}
inline bool WaitForStateTransitionResultRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.prove)
  return _internal_prove();
}
inline void WaitForStateTransitionResultRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void WaitForStateTransitionResultRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.WaitForStateTransitionResultRequest.prove)
}

// -------------------------------------------------------------------

// WaitForStateTransitionResultResponse

// .org.dash.platform.dapi.v0.StateTransitionBroadcastError error = 1;
inline bool WaitForStateTransitionResultResponse::_internal_has_error() const {
  return responses_case() == kError;
}
inline bool WaitForStateTransitionResultResponse::has_error() const {
  return _internal_has_error();
}
inline void WaitForStateTransitionResultResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void WaitForStateTransitionResultResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete responses_.error_;
    }
    clear_has_responses();
  }
}
inline ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* WaitForStateTransitionResultResponse::release_error() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
  if (_internal_has_error()) {
    clear_has_responses();
      ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* temp = responses_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    responses_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::dash::platform::dapi::v0::StateTransitionBroadcastError& WaitForStateTransitionResultResponse::_internal_error() const {
  return _internal_has_error()
      ? *responses_.error_
      : reinterpret_cast< ::org::dash::platform::dapi::v0::StateTransitionBroadcastError&>(::org::dash::platform::dapi::v0::_StateTransitionBroadcastError_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::StateTransitionBroadcastError& WaitForStateTransitionResultResponse::error() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
  return _internal_error();
}
inline ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* WaitForStateTransitionResultResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
  if (_internal_has_error()) {
    clear_has_responses();
    ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* temp = responses_.error_;
    responses_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WaitForStateTransitionResultResponse::unsafe_arena_set_allocated_error(::org::dash::platform::dapi::v0::StateTransitionBroadcastError* error) {
  clear_responses();
  if (error) {
    set_has_error();
    responses_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
}
inline ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* WaitForStateTransitionResultResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_responses();
    set_has_error();
    responses_.error_ = CreateMaybeMessage< ::org::dash::platform::dapi::v0::StateTransitionBroadcastError >(GetArenaForAllocation());
  }
  return responses_.error_;
}
inline ::org::dash::platform::dapi::v0::StateTransitionBroadcastError* WaitForStateTransitionResultResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.error)
  return _internal_mutable_error();
}

// .org.dash.platform.dapi.v0.Proof proof = 2;
inline bool WaitForStateTransitionResultResponse::_internal_has_proof() const {
  return responses_case() == kProof;
}
inline bool WaitForStateTransitionResultResponse::has_proof() const {
  return _internal_has_proof();
}
inline void WaitForStateTransitionResultResponse::set_has_proof() {
  _oneof_case_[0] = kProof;
}
inline void WaitForStateTransitionResultResponse::clear_proof() {
  if (_internal_has_proof()) {
    if (GetArenaForAllocation() == nullptr) {
      delete responses_.proof_;
    }
    clear_has_responses();
  }
}
inline ::org::dash::platform::dapi::v0::Proof* WaitForStateTransitionResultResponse::release_proof() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
  if (_internal_has_proof()) {
    clear_has_responses();
      ::org::dash::platform::dapi::v0::Proof* temp = responses_.proof_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    responses_.proof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::org::dash::platform::dapi::v0::Proof& WaitForStateTransitionResultResponse::_internal_proof() const {
  return _internal_has_proof()
      ? *responses_.proof_
      : reinterpret_cast< ::org::dash::platform::dapi::v0::Proof&>(::org::dash::platform::dapi::v0::_Proof_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::Proof& WaitForStateTransitionResultResponse::proof() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
  return _internal_proof();
}
inline ::org::dash::platform::dapi::v0::Proof* WaitForStateTransitionResultResponse::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_unsafe_arena_release:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
  if (_internal_has_proof()) {
    clear_has_responses();
    ::org::dash::platform::dapi::v0::Proof* temp = responses_.proof_;
    responses_.proof_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WaitForStateTransitionResultResponse::unsafe_arena_set_allocated_proof(::org::dash::platform::dapi::v0::Proof* proof) {
  clear_responses();
  if (proof) {
    set_has_proof();
    responses_.proof_ = proof;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
}
inline ::org::dash::platform::dapi::v0::Proof* WaitForStateTransitionResultResponse::_internal_mutable_proof() {
  if (!_internal_has_proof()) {
    clear_responses();
    set_has_proof();
    responses_.proof_ = CreateMaybeMessage< ::org::dash::platform::dapi::v0::Proof >(GetArenaForAllocation());
  }
  return responses_.proof_;
}
inline ::org::dash::platform::dapi::v0::Proof* WaitForStateTransitionResultResponse::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.proof)
  return _internal_mutable_proof();
}

// .org.dash.platform.dapi.v0.ResponseMetadata metadata = 3;
inline bool WaitForStateTransitionResultResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool WaitForStateTransitionResultResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void WaitForStateTransitionResultResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& WaitForStateTransitionResultResponse::_internal_metadata() const {
  const ::org::dash::platform::dapi::v0::ResponseMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ResponseMetadata&>(
      ::org::dash::platform::dapi::v0::_ResponseMetadata_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ResponseMetadata& WaitForStateTransitionResultResponse::metadata() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
  return _internal_metadata();
}
inline void WaitForStateTransitionResultResponse::unsafe_arena_set_allocated_metadata(
    ::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* WaitForStateTransitionResultResponse::release_metadata() {
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* WaitForStateTransitionResultResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
  
  ::org::dash::platform::dapi::v0::ResponseMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* WaitForStateTransitionResultResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ResponseMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::org::dash::platform::dapi::v0::ResponseMetadata* WaitForStateTransitionResultResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
  return _internal_mutable_metadata();
}
inline void WaitForStateTransitionResultResponse::set_allocated_metadata(::org::dash::platform::dapi::v0::ResponseMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ResponseMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.WaitForStateTransitionResultResponse.metadata)
}

inline bool WaitForStateTransitionResultResponse::has_responses() const {
  return responses_case() != RESPONSES_NOT_SET;
}
inline void WaitForStateTransitionResultResponse::clear_has_responses() {
  _oneof_case_[0] = RESPONSES_NOT_SET;
}
inline WaitForStateTransitionResultResponse::ResponsesCase WaitForStateTransitionResultResponse::responses_case() const {
  return WaitForStateTransitionResultResponse::ResponsesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsensusParamsBlock

// string max_bytes = 1;
inline void ConsensusParamsBlock::clear_max_bytes() {
  max_bytes_.ClearToEmpty();
}
inline const std::string& ConsensusParamsBlock::max_bytes() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
  return _internal_max_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusParamsBlock::set_max_bytes(ArgT0&& arg0, ArgT... args) {
 
 max_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
}
inline std::string* ConsensusParamsBlock::mutable_max_bytes() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
  return _internal_mutable_max_bytes();
}
inline const std::string& ConsensusParamsBlock::_internal_max_bytes() const {
  return max_bytes_.Get();
}
inline void ConsensusParamsBlock::_internal_set_max_bytes(const std::string& value) {
  
  max_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsensusParamsBlock::_internal_mutable_max_bytes() {
  
  return max_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsensusParamsBlock::release_max_bytes() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
  return max_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsensusParamsBlock::set_allocated_max_bytes(std::string* max_bytes) {
  if (max_bytes != nullptr) {
    
  } else {
    
  }
  max_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_bytes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_bytes)
}

// string max_gas = 2;
inline void ConsensusParamsBlock::clear_max_gas() {
  max_gas_.ClearToEmpty();
}
inline const std::string& ConsensusParamsBlock::max_gas() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
  return _internal_max_gas();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusParamsBlock::set_max_gas(ArgT0&& arg0, ArgT... args) {
 
 max_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
}
inline std::string* ConsensusParamsBlock::mutable_max_gas() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
  return _internal_mutable_max_gas();
}
inline const std::string& ConsensusParamsBlock::_internal_max_gas() const {
  return max_gas_.Get();
}
inline void ConsensusParamsBlock::_internal_set_max_gas(const std::string& value) {
  
  max_gas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsensusParamsBlock::_internal_mutable_max_gas() {
  
  return max_gas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsensusParamsBlock::release_max_gas() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
  return max_gas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsensusParamsBlock::set_allocated_max_gas(std::string* max_gas) {
  if (max_gas != nullptr) {
    
  } else {
    
  }
  max_gas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_gas,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.ConsensusParamsBlock.max_gas)
}

// string time_iota_ms = 3;
inline void ConsensusParamsBlock::clear_time_iota_ms() {
  time_iota_ms_.ClearToEmpty();
}
inline const std::string& ConsensusParamsBlock::time_iota_ms() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
  return _internal_time_iota_ms();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusParamsBlock::set_time_iota_ms(ArgT0&& arg0, ArgT... args) {
 
 time_iota_ms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
}
inline std::string* ConsensusParamsBlock::mutable_time_iota_ms() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
  return _internal_mutable_time_iota_ms();
}
inline const std::string& ConsensusParamsBlock::_internal_time_iota_ms() const {
  return time_iota_ms_.Get();
}
inline void ConsensusParamsBlock::_internal_set_time_iota_ms(const std::string& value) {
  
  time_iota_ms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsensusParamsBlock::_internal_mutable_time_iota_ms() {
  
  return time_iota_ms_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsensusParamsBlock::release_time_iota_ms() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
  return time_iota_ms_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsensusParamsBlock::set_allocated_time_iota_ms(std::string* time_iota_ms) {
  if (time_iota_ms != nullptr) {
    
  } else {
    
  }
  time_iota_ms_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_iota_ms,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.ConsensusParamsBlock.time_iota_ms)
}

// -------------------------------------------------------------------

// ConsensusParamsEvidence

// string max_age_num_blocks = 1;
inline void ConsensusParamsEvidence::clear_max_age_num_blocks() {
  max_age_num_blocks_.ClearToEmpty();
}
inline const std::string& ConsensusParamsEvidence::max_age_num_blocks() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
  return _internal_max_age_num_blocks();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusParamsEvidence::set_max_age_num_blocks(ArgT0&& arg0, ArgT... args) {
 
 max_age_num_blocks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
}
inline std::string* ConsensusParamsEvidence::mutable_max_age_num_blocks() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
  return _internal_mutable_max_age_num_blocks();
}
inline const std::string& ConsensusParamsEvidence::_internal_max_age_num_blocks() const {
  return max_age_num_blocks_.Get();
}
inline void ConsensusParamsEvidence::_internal_set_max_age_num_blocks(const std::string& value) {
  
  max_age_num_blocks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsensusParamsEvidence::_internal_mutable_max_age_num_blocks() {
  
  return max_age_num_blocks_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsensusParamsEvidence::release_max_age_num_blocks() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
  return max_age_num_blocks_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsensusParamsEvidence::set_allocated_max_age_num_blocks(std::string* max_age_num_blocks) {
  if (max_age_num_blocks != nullptr) {
    
  } else {
    
  }
  max_age_num_blocks_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_age_num_blocks,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_num_blocks)
}

// string max_age_duration = 2;
inline void ConsensusParamsEvidence::clear_max_age_duration() {
  max_age_duration_.ClearToEmpty();
}
inline const std::string& ConsensusParamsEvidence::max_age_duration() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
  return _internal_max_age_duration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusParamsEvidence::set_max_age_duration(ArgT0&& arg0, ArgT... args) {
 
 max_age_duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
}
inline std::string* ConsensusParamsEvidence::mutable_max_age_duration() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
  return _internal_mutable_max_age_duration();
}
inline const std::string& ConsensusParamsEvidence::_internal_max_age_duration() const {
  return max_age_duration_.Get();
}
inline void ConsensusParamsEvidence::_internal_set_max_age_duration(const std::string& value) {
  
  max_age_duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsensusParamsEvidence::_internal_mutable_max_age_duration() {
  
  return max_age_duration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsensusParamsEvidence::release_max_age_duration() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
  return max_age_duration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsensusParamsEvidence::set_allocated_max_age_duration(std::string* max_age_duration) {
  if (max_age_duration != nullptr) {
    
  } else {
    
  }
  max_age_duration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_age_duration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_age_duration)
}

// string max_bytes = 3;
inline void ConsensusParamsEvidence::clear_max_bytes() {
  max_bytes_.ClearToEmpty();
}
inline const std::string& ConsensusParamsEvidence::max_bytes() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
  return _internal_max_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConsensusParamsEvidence::set_max_bytes(ArgT0&& arg0, ArgT... args) {
 
 max_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
}
inline std::string* ConsensusParamsEvidence::mutable_max_bytes() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
  return _internal_mutable_max_bytes();
}
inline const std::string& ConsensusParamsEvidence::_internal_max_bytes() const {
  return max_bytes_.Get();
}
inline void ConsensusParamsEvidence::_internal_set_max_bytes(const std::string& value) {
  
  max_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConsensusParamsEvidence::_internal_mutable_max_bytes() {
  
  return max_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConsensusParamsEvidence::release_max_bytes() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
  return max_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConsensusParamsEvidence::set_allocated_max_bytes(std::string* max_bytes) {
  if (max_bytes != nullptr) {
    
  } else {
    
  }
  max_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_bytes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.ConsensusParamsEvidence.max_bytes)
}

// -------------------------------------------------------------------

// GetConsensusParamsRequest

// int64 height = 1;
inline void GetConsensusParamsRequest::clear_height() {
  height_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetConsensusParamsRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetConsensusParamsRequest::height() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetConsensusParamsRequest.height)
  return _internal_height();
}
inline void GetConsensusParamsRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void GetConsensusParamsRequest::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetConsensusParamsRequest.height)
}

// bool prove = 2;
inline void GetConsensusParamsRequest::clear_prove() {
  prove_ = false;
}
inline bool GetConsensusParamsRequest::_internal_prove() const {
  return prove_;
}
inline bool GetConsensusParamsRequest::prove() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetConsensusParamsRequest.prove)
  return _internal_prove();
}
inline void GetConsensusParamsRequest::_internal_set_prove(bool value) {
  
  prove_ = value;
}
inline void GetConsensusParamsRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:org.dash.platform.dapi.v0.GetConsensusParamsRequest.prove)
}

// -------------------------------------------------------------------

// GetConsensusParamsResponse

// .org.dash.platform.dapi.v0.ConsensusParamsBlock block = 1;
inline bool GetConsensusParamsResponse::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetConsensusParamsResponse::has_block() const {
  return _internal_has_block();
}
inline void GetConsensusParamsResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ConsensusParamsBlock& GetConsensusParamsResponse::_internal_block() const {
  const ::org::dash::platform::dapi::v0::ConsensusParamsBlock* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ConsensusParamsBlock&>(
      ::org::dash::platform::dapi::v0::_ConsensusParamsBlock_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ConsensusParamsBlock& GetConsensusParamsResponse::block() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
  return _internal_block();
}
inline void GetConsensusParamsResponse::unsafe_arena_set_allocated_block(
    ::org::dash::platform::dapi::v0::ConsensusParamsBlock* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsBlock* GetConsensusParamsResponse::release_block() {
  
  ::org::dash::platform::dapi::v0::ConsensusParamsBlock* temp = block_;
  block_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsBlock* GetConsensusParamsResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
  
  ::org::dash::platform::dapi::v0::ConsensusParamsBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsBlock* GetConsensusParamsResponse::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ConsensusParamsBlock>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsBlock* GetConsensusParamsResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
  return _internal_mutable_block();
}
inline void GetConsensusParamsResponse::set_allocated_block(::org::dash::platform::dapi::v0::ConsensusParamsBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ConsensusParamsBlock>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetConsensusParamsResponse.block)
}

// .org.dash.platform.dapi.v0.ConsensusParamsEvidence evidence = 2;
inline bool GetConsensusParamsResponse::_internal_has_evidence() const {
  return this != internal_default_instance() && evidence_ != nullptr;
}
inline bool GetConsensusParamsResponse::has_evidence() const {
  return _internal_has_evidence();
}
inline void GetConsensusParamsResponse::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
inline const ::org::dash::platform::dapi::v0::ConsensusParamsEvidence& GetConsensusParamsResponse::_internal_evidence() const {
  const ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* p = evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::dash::platform::dapi::v0::ConsensusParamsEvidence&>(
      ::org::dash::platform::dapi::v0::_ConsensusParamsEvidence_default_instance_);
}
inline const ::org::dash::platform::dapi::v0::ConsensusParamsEvidence& GetConsensusParamsResponse::evidence() const {
  // @@protoc_insertion_point(field_get:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
  return _internal_evidence();
}
inline void GetConsensusParamsResponse::unsafe_arena_set_allocated_evidence(
    ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  evidence_ = evidence;
  if (evidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* GetConsensusParamsResponse::release_evidence() {
  
  ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* temp = evidence_;
  evidence_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* GetConsensusParamsResponse::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
  
  ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* temp = evidence_;
  evidence_ = nullptr;
  return temp;
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* GetConsensusParamsResponse::_internal_mutable_evidence() {
  
  if (evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::dash::platform::dapi::v0::ConsensusParamsEvidence>(GetArenaForAllocation());
    evidence_ = p;
  }
  return evidence_;
}
inline ::org::dash::platform::dapi::v0::ConsensusParamsEvidence* GetConsensusParamsResponse::mutable_evidence() {
  // @@protoc_insertion_point(field_mutable:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
  return _internal_mutable_evidence();
}
inline void GetConsensusParamsResponse::set_allocated_evidence(::org::dash::platform::dapi::v0::ConsensusParamsEvidence* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete evidence_;
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::org::dash::platform::dapi::v0::ConsensusParamsEvidence>::GetOwningArena(evidence);
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    
  } else {
    
  }
  evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:org.dash.platform.dapi.v0.GetConsensusParamsResponse.evidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v0
}  // namespace dapi
}  // namespace platform
}  // namespace dash
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_platform_2eproto
