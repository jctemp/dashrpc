// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto
#ifndef GRPC_core_2eproto__INCLUDED
#define GRPC_core_2eproto__INCLUDED

#include "core.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace org {
namespace dash {
namespace platform {
namespace dapi {
namespace v0 {

class Core final {
 public:
  static constexpr char const* service_full_name() {
    return "org.dash.platform.dapi.v0.Core";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::org::dash::platform::dapi::v0::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetStatusResponse>> AsyncgetStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetStatusResponse>>(AsyncgetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetStatusResponse>> PrepareAsyncgetStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetStatusResponse>>(PrepareAsyncgetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::org::dash::platform::dapi::v0::GetBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetBlockResponse>> AsyncgetBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetBlockResponse>>(AsyncgetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetBlockResponse>> PrepareAsyncgetBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetBlockResponse>>(PrepareAsyncgetBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>> AsyncbroadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>>(AsyncbroadcastTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>> PrepareAsyncbroadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>>(PrepareAsyncbroadcastTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetTransactionResponse>> AsyncgetTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetTransactionResponse>>(AsyncgetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetTransactionResponse>> PrepareAsyncgetTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetTransactionResponse>>(PrepareAsyncgetTransactionRaw(context, request, cq));
    }
    virtual ::grpc::Status getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>> AsyncgetEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>>(AsyncgetEstimatedTransactionFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>> PrepareAsyncgetEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>>(PrepareAsyncgetEstimatedTransactionFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>> subscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>>(subscribeToBlockHeadersWithChainLocksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>> AsyncsubscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>>(AsyncsubscribeToBlockHeadersWithChainLocksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>> PrepareAsyncsubscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>>(PrepareAsyncsubscribeToBlockHeadersWithChainLocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>> subscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>>(subscribeToTransactionsWithProofsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>> AsyncsubscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>>(AsyncsubscribeToTransactionsWithProofsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>> PrepareAsyncsubscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>>(PrepareAsyncsubscribeToTransactionsWithProofsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void subscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request, ::grpc::ClientReadReactor< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* reactor) = 0;
      virtual void subscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request, ::grpc::ClientReadReactor< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetStatusResponse>* AsyncgetStatusRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetStatusResponse>* PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetBlockResponse>* AsyncgetBlockRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetBlockResponse>* PrepareAsyncgetBlockRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* AsyncbroadcastTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* PrepareAsyncbroadcastTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetTransactionResponse>* AsyncgetTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetTransactionResponse>* PrepareAsyncgetTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* AsyncgetEstimatedTransactionFeeRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* PrepareAsyncgetEstimatedTransactionFeeRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* subscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* AsyncsubscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* PrepareAsyncsubscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* subscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* AsyncsubscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* PrepareAsyncsubscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::org::dash::platform::dapi::v0::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>> AsyncgetStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>>(AsyncgetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>> PrepareAsyncgetStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>>(PrepareAsyncgetStatusRaw(context, request, cq));
    }
    ::grpc::Status getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::org::dash::platform::dapi::v0::GetBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>> AsyncgetBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>>(AsyncgetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>> PrepareAsyncgetBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>>(PrepareAsyncgetBlockRaw(context, request, cq));
    }
    ::grpc::Status broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>> AsyncbroadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>>(AsyncbroadcastTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>> PrepareAsyncbroadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>>(PrepareAsyncbroadcastTransactionRaw(context, request, cq));
    }
    ::grpc::Status getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>> AsyncgetTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>>(AsyncgetTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>> PrepareAsyncgetTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>>(PrepareAsyncgetTransactionRaw(context, request, cq));
    }
    ::grpc::Status getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>> AsyncgetEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>>(AsyncgetEstimatedTransactionFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>> PrepareAsyncgetEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>>(PrepareAsyncgetEstimatedTransactionFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>> subscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>>(subscribeToBlockHeadersWithChainLocksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>> AsyncsubscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>>(AsyncsubscribeToBlockHeadersWithChainLocksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>> PrepareAsyncsubscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>>(PrepareAsyncsubscribeToBlockHeadersWithChainLocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>> subscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>>(subscribeToTransactionsWithProofsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>> AsyncsubscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>>(AsyncsubscribeToTransactionsWithProofsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>> PrepareAsyncsubscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>>(PrepareAsyncsubscribeToTransactionsWithProofsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void getStatus(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void getBlock(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void broadcastTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void getTransaction(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response, std::function<void(::grpc::Status)>) override;
      void getEstimatedTransactionFee(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void subscribeToBlockHeadersWithChainLocks(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request, ::grpc::ClientReadReactor< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* reactor) override;
      void subscribeToTransactionsWithProofs(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request, ::grpc::ClientReadReactor< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>* AsyncgetStatusRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetStatusResponse>* PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>* AsyncgetBlockRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetBlockResponse>* PrepareAsyncgetBlockRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* AsyncbroadcastTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* PrepareAsyncbroadcastTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>* AsyncgetTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetTransactionResponse>* PrepareAsyncgetTransactionRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* AsyncgetEstimatedTransactionFeeRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* PrepareAsyncgetEstimatedTransactionFeeRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* subscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request) override;
    ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* AsyncsubscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* PrepareAsyncsubscribeToBlockHeadersWithChainLocksRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* subscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request) override;
    ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* AsyncsubscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* PrepareAsyncsubscribeToTransactionsWithProofsRaw(::grpc::ClientContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_getBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_broadcastTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_getTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_getEstimatedTransactionFee_;
    const ::grpc::internal::RpcMethod rpcmethod_subscribeToBlockHeadersWithChainLocks_;
    const ::grpc::internal::RpcMethod rpcmethod_subscribeToTransactionsWithProofs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getStatus(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response);
    virtual ::grpc::Status getBlock(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response);
    virtual ::grpc::Status broadcastTransaction(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response);
    virtual ::grpc::Status getTransaction(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response);
    virtual ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response);
    virtual ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* writer);
    virtual ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatus(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::dash::platform::dapi::v0::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlock(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::dash::platform::dapi::v0::GetBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_broadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_broadcastTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_broadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status broadcastTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbroadcastTransaction(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTransaction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransaction(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::dash::platform::dapi::v0::GetTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEstimatedTransactionFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getEstimatedTransactionFee() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getEstimatedTransactionFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEstimatedTransactionFee(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_subscribeToBlockHeadersWithChainLocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_subscribeToBlockHeadersWithChainLocks() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_subscribeToBlockHeadersWithChainLocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request, ::grpc::ServerAsyncWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_subscribeToTransactionsWithProofs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_subscribeToTransactionsWithProofs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_subscribeToTransactionsWithProofs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubscribeToTransactionsWithProofs(::grpc::ServerContext* context, ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request, ::grpc::ServerAsyncWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getStatus<WithAsyncMethod_getBlock<WithAsyncMethod_broadcastTransaction<WithAsyncMethod_getTransaction<WithAsyncMethod_getEstimatedTransactionFee<WithAsyncMethod_subscribeToBlockHeadersWithChainLocks<WithAsyncMethod_subscribeToTransactionsWithProofs<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::GetStatusRequest* request, ::org::dash::platform::dapi::v0::GetStatusResponse* response) { return this->getStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getStatus(
        ::grpc::MessageAllocator< ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getBlock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::GetBlockRequest* request, ::org::dash::platform::dapi::v0::GetBlockResponse* response) { return this->getBlock(context, request, response); }));}
    void SetMessageAllocatorFor_getBlock(
        ::grpc::MessageAllocator< ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_broadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_broadcastTransaction() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* request, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* response) { return this->broadcastTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_broadcastTransaction(
        ::grpc::MessageAllocator< ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_broadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status broadcastTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* broadcastTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTransaction() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::GetTransactionRequest* request, ::org::dash::platform::dapi::v0::GetTransactionResponse* response) { return this->getTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_getTransaction(
        ::grpc::MessageAllocator< ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getEstimatedTransactionFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getEstimatedTransactionFee() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* request, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* response) { return this->getEstimatedTransactionFee(context, request, response); }));}
    void SetMessageAllocatorFor_getEstimatedTransactionFee(
        ::grpc::MessageAllocator< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getEstimatedTransactionFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getEstimatedTransactionFee(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_subscribeToBlockHeadersWithChainLocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_subscribeToBlockHeadersWithChainLocks() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest, ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* request) { return this->subscribeToBlockHeadersWithChainLocks(context, request); }));
    }
    ~WithCallbackMethod_subscribeToBlockHeadersWithChainLocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* subscribeToBlockHeadersWithChainLocks(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_subscribeToTransactionsWithProofs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_subscribeToTransactionsWithProofs() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest, ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* request) { return this->subscribeToTransactionsWithProofs(context, request); }));
    }
    ~WithCallbackMethod_subscribeToTransactionsWithProofs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* subscribeToTransactionsWithProofs(
      ::grpc::CallbackServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getStatus<WithCallbackMethod_getBlock<WithCallbackMethod_broadcastTransaction<WithCallbackMethod_getTransaction<WithCallbackMethod_getEstimatedTransactionFee<WithCallbackMethod_subscribeToBlockHeadersWithChainLocks<WithCallbackMethod_subscribeToTransactionsWithProofs<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_broadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_broadcastTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_broadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status broadcastTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTransaction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEstimatedTransactionFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getEstimatedTransactionFee() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getEstimatedTransactionFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_subscribeToBlockHeadersWithChainLocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_subscribeToBlockHeadersWithChainLocks() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_subscribeToBlockHeadersWithChainLocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_subscribeToTransactionsWithProofs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_subscribeToTransactionsWithProofs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_subscribeToTransactionsWithProofs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_broadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_broadcastTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_broadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status broadcastTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbroadcastTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTransaction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEstimatedTransactionFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getEstimatedTransactionFee() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getEstimatedTransactionFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEstimatedTransactionFee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_subscribeToBlockHeadersWithChainLocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_subscribeToBlockHeadersWithChainLocks() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_subscribeToBlockHeadersWithChainLocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_subscribeToTransactionsWithProofs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_subscribeToTransactionsWithProofs() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_subscribeToTransactionsWithProofs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsubscribeToTransactionsWithProofs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getBlock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_broadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_broadcastTransaction() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->broadcastTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_broadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status broadcastTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* broadcastTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTransaction() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getEstimatedTransactionFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getEstimatedTransactionFee() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getEstimatedTransactionFee(context, request, response); }));
    }
    ~WithRawCallbackMethod_getEstimatedTransactionFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getEstimatedTransactionFee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_subscribeToBlockHeadersWithChainLocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_subscribeToBlockHeadersWithChainLocks() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->subscribeToBlockHeadersWithChainLocks(context, request); }));
    }
    ~WithRawCallbackMethod_subscribeToBlockHeadersWithChainLocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* subscribeToBlockHeadersWithChainLocks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_subscribeToTransactionsWithProofs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_subscribeToTransactionsWithProofs() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->subscribeToTransactionsWithProofs(context, request); }));
    }
    ~WithRawCallbackMethod_subscribeToTransactionsWithProofs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* subscribeToTransactionsWithProofs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::org::dash::platform::dapi::v0::GetStatusRequest, ::org::dash::platform::dapi::v0::GetStatusResponse>* streamer) {
                       return this->StreamedgetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetStatusRequest* /*request*/, ::org::dash::platform::dapi::v0::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::dash::platform::dapi::v0::GetStatusRequest,::org::dash::platform::dapi::v0::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::org::dash::platform::dapi::v0::GetBlockRequest, ::org::dash::platform::dapi::v0::GetBlockResponse>* streamer) {
                       return this->StreamedgetBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBlock(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetBlockRequest* /*request*/, ::org::dash::platform::dapi::v0::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::dash::platform::dapi::v0::GetBlockRequest,::org::dash::platform::dapi::v0::GetBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_broadcastTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_broadcastTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::org::dash::platform::dapi::v0::BroadcastTransactionRequest, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* streamer) {
                       return this->StreamedbroadcastTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_broadcastTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status broadcastTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BroadcastTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::BroadcastTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbroadcastTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::dash::platform::dapi::v0::BroadcastTransactionRequest,::org::dash::platform::dapi::v0::BroadcastTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTransaction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::org::dash::platform::dapi::v0::GetTransactionRequest, ::org::dash::platform::dapi::v0::GetTransactionResponse>* streamer) {
                       return this->StreamedgetTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTransaction(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetTransactionRequest* /*request*/, ::org::dash::platform::dapi::v0::GetTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::dash::platform::dapi::v0::GetTransactionRequest,::org::dash::platform::dapi::v0::GetTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEstimatedTransactionFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getEstimatedTransactionFee() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* streamer) {
                       return this->StreamedgetEstimatedTransactionFee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getEstimatedTransactionFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEstimatedTransactionFee(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest* /*request*/, ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEstimatedTransactionFee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeRequest,::org::dash::platform::dapi::v0::GetEstimatedTransactionFeeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getStatus<WithStreamedUnaryMethod_getBlock<WithStreamedUnaryMethod_broadcastTransaction<WithStreamedUnaryMethod_getTransaction<WithStreamedUnaryMethod_getEstimatedTransactionFee<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_subscribeToBlockHeadersWithChainLocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_subscribeToBlockHeadersWithChainLocks() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest, ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest, ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* streamer) {
                       return this->StreamedsubscribeToBlockHeadersWithChainLocks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_subscribeToBlockHeadersWithChainLocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status subscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedsubscribeToBlockHeadersWithChainLocks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksRequest,::org::dash::platform::dapi::v0::BlockHeadersWithChainLocksResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_subscribeToTransactionsWithProofs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_subscribeToTransactionsWithProofs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest, ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest, ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* streamer) {
                       return this->StreamedsubscribeToTransactionsWithProofs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_subscribeToTransactionsWithProofs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status subscribeToTransactionsWithProofs(::grpc::ServerContext* /*context*/, const ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest* /*request*/, ::grpc::ServerWriter< ::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedsubscribeToTransactionsWithProofs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::org::dash::platform::dapi::v0::TransactionsWithProofsRequest,::org::dash::platform::dapi::v0::TransactionsWithProofsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_subscribeToBlockHeadersWithChainLocks<WithSplitStreamingMethod_subscribeToTransactionsWithProofs<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getStatus<WithStreamedUnaryMethod_getBlock<WithStreamedUnaryMethod_broadcastTransaction<WithStreamedUnaryMethod_getTransaction<WithStreamedUnaryMethod_getEstimatedTransactionFee<WithSplitStreamingMethod_subscribeToBlockHeadersWithChainLocks<WithSplitStreamingMethod_subscribeToTransactionsWithProofs<Service > > > > > > > StreamedService;
};

}  // namespace v0
}  // namespace dapi
}  // namespace platform
}  // namespace dash
}  // namespace org


#endif  // GRPC_core_2eproto__INCLUDED
